@using System.Globalization
@model CustomerModel
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function() {
        $("#customer-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>

<div id="customer-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Customers.Customers.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Customers.Customers.CustomerRoles")
        </li>
        @if (Model.Id > 0)
        {
            <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.Addresses")
            </li>
            <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.ActivityLog")
            </li>
            <li @Html.RenderSelectedTabIndex(4, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.Contributions")
            </li>
            if (Model.HasContributions)
            {
                <li @Html.RenderSelectedTabIndex(5, GetSelectedTabIndex())>
                    @T("Admin.Customers.Customers.Loan")
                </li>
            }
        }
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabCustomerRoles()
    </div>
    @if (Model.Id > 0)
    {
        <div>
            @TabAddresses()
        </div>
        <div>
            @TabActivityLog()
        </div>
        <div>
            @TabContribution()
        </div>
        if (Model.HasContributions)
        {
            <div>
                @TabLoan()
            </div>
        }
    }

</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "customer-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    if (Model.CountryEnabled && Model.StateProvinceEnabled)
    {
        <script type="text/javascript">
            $(document).ready(function() {
                $("#@Html.FieldIdFor(model => model.CountryId)").change(function() {
                    var selectedItem = $(this).val();
                    var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");

                    var postData = {
                        countryId: selectedItem,
                        addSelectStateItem: "true"
                    };

                    $.ajax({
                        cache: false,
                        type: "GET",
                        url: "@Url.Action("GetStatesByCountryId", "Country")",
                        data: postData,
                        success: function(data) {
                            ddlStates.html('');
                            $.each(data, function(id, option) {
                                ddlStates.append($('<option></option>').val(option.id).html(option.name));
                            });
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve states.');
                        }
                    });
                });

                $("#@Html.FieldIdFor(model => model.StateProvinceId)").change(function() {
                    var selectedItem = $(this).val();
                    var ddlCities = $("#@Html.FieldIdFor(model => model.CityId)");

                    var postData = {
                        stateProvinceId: selectedItem,
                        addSelectCityItem: "true"
                    };

                    $.ajax({
                        cache: false,
                        type: "GET",
                        url: "@Url.Action("GetCityByStateProvinceId", "Country")",
                        data: postData,
                        success: function(data) {
                            ddlCities.html('');
                            $.each(data, function(id, option) {
                                ddlCities.append($('<option></option>').val(option.id).html(option.name));
                            });
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve states.');
                        }
                    });
                });
            });
        </script>
    }
    <table class="adminContent customer-info-tab">
        @if (Model.UsernamesEnabled)
        {
            if (Model.Id == 0 || Model.AllowUsersToChangeUsernames)
            {
                <tr>
                    <td class="adminTitle">
                        @Html.KsLabelFor(model => model.Username):
                    </td>
                    <td class="adminData">
                        @Html.EditorFor(model => model.Username)
                        @Html.ValidationMessageFor(model => model.Username)
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td class="adminTitle">
                        @Html.KsLabelFor(model => model.Username):
                    </td>
                    <td class="adminData">
                        @Model.Username
                        @Html.HiddenFor(model => model.Username)
                    </td>
                </tr>
            }
        }
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.Email):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email)
            </td>
        </tr>
        @*<tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.Password):
                </td>
                <td class="adminData">
                    @Html.TextBoxFor(model => model.Password, new { autocomplete = "off", @class = "text-box single-line" })
                    @Html.ValidationMessageFor(model => model.Password)
                    @if (Model.Id > 0)
                    {
                        <input type="submit" name="changepassword" class="k-button" value="@T("Admin.Customers.Customers.Fields.Password.Change")" />
                    }
                </td>
            </tr>*@
        @if (Model.GenderEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.Gender):
                </td>
                <td class="adminData">
                    <div class="gender">
                        @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "Gender_Male" })
                        <label class="forcheckbox" for="Gender_Male">@T("Admin.Customers.Customers.Fields.Gender.Male")</label>
                    </div>
                    <div class="gender">
                        @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "Gender_Female" })
                        <label class="forcheckbox" for="Gender_Female">@T("Admin.Customers.Customers.Fields.Gender.Female")</label>
                    </div>
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.FirstName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.FirstName)
                @Html.ValidationMessageFor(model => model.FirstName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.LastName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LastName)
                @Html.ValidationMessageFor(model => model.LastName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.AdmCode):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AdmCode)
                @Html.ValidationMessageFor(model => model.AdmCode)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.Dni):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Dni)
                @Html.ValidationMessageFor(model => model.Dni)
            </td>
        </tr>
        @if (Model.DateOfBirthEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.DateOfBirth):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.DateOfBirth)
                    @Html.ValidationMessageFor(model => model.DateOfBirth)
                </td>
            </tr>
        }
        @if (Model.CompanyEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.Company):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Company)
                    @Html.ValidationMessageFor(model => model.Company)
                </td>
            </tr>
        }
        @if (Model.StreetAddressEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.StreetAddress):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.StreetAddress)
                    @Html.ValidationMessageFor(model => model.StreetAddress)
                </td>
            </tr>
        }
        @if (Model.StreetAddress2Enabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.StreetAddress2):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.StreetAddress2)
                    @Html.ValidationMessageFor(model => model.StreetAddress2)
                </td>
            </tr>
        }
        @if (Model.ZipPostalCodeEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.ZipPostalCode):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.ZipPostalCode)
                    @Html.ValidationMessageFor(model => model.ZipPostalCode)
                </td>
            </tr>
        }
        @if (Model.CountryEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.CountryId):
                </td>
                <td class="adminData">
                    @Html.DropDownList("CountryId", Model.AvailableCountries)
                    @Html.ValidationMessageFor(model => model.CountryId)
                    @*<script>
                            $(document).ready(function() {
                                $('#CountryId').kendoDropDownList();
                            });
                        </script>*@
                </td>
            </tr>
        }
        @if (Model.CountryEnabled && Model.StateProvinceEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.StateProvinceId):
                </td>
                <td class="adminData">
                    @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                    @Html.ValidationMessageFor(model => model.StateProvinceId)
                    @*<script>
                            $(document).ready(function() {
                                $('#StateProvinceId').kendoDropDownList();
                            });
                        </script>*@
                </td>
            </tr>
        }
        @if (Model.CountryEnabled && Model.StateProvinceEnabled && Model.CityEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.City):
                </td>
                <td class="adminData">
                    @Html.DropDownList("CityId", Model.AvailableCities)
                    @Html.ValidationMessageFor(model => model.CityId)
                    @*<script>
                            $(document).ready(function() {
                                $('#CityId').kendoDropDownList();
                            });
                        </script>*@
                </td>
            </tr>
        }
        @if (Model.PhoneEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.Phone):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Phone)
                    @Html.ValidationMessageFor(model => model.Phone)
                </td>
            </tr>
        }
        @if (Model.FaxEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.Fax):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Fax)
                    @Html.ValidationMessageFor(model => model.Fax)
                </td>
            </tr>
        }
        @if (Model.CustomerAttributes.Count > 0)
        {
            @Html.Partial("_CustomerAttributes", Model.CustomerAttributes)
        }
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.AdminComment):
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.AdminComment, new { style = "Width: 250px; Height: 150px;" })
                @Html.ValidationMessageFor(model => model.AdminComment)
            </td>
        </tr>
        @if (Model.AllowCustomersToSetTimeZone)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.TimeZoneId):
                </td>
                <td class="adminData">
                    @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                    @Html.ValidationMessageFor(model => model.TimeZoneId)
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.Active):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Active)
                @Html.ValidationMessageFor(model => model.Active)
            </td>
        </tr>
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.LastIpAddress):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.LastIpAddress)
                </td>
            </tr>
        }
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.CreatedOn):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.CreatedOn)
                </td>
            </tr>
        }
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.LastActivityDate):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.LastActivityDate)
                </td>
            </tr>
        }
        @if (Model.Id > 0 && !String.IsNullOrEmpty(Model.LastVisitedPage))
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.LastVisitedPage):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.LastVisitedPage)
                </td>
            </tr>
        }
    </table>
}

@helper TabCustomerRoles()
{
    if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
    {
        foreach (var customerRole in Model.AvailableCustomerRoles)
        {
            <div>
                <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id" checked="@(Model.SelectedCustomerRoleIds != null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))" />@customerRole.Name
            </div>
        }
    }
    else
    {
        @T("Admin.Customers.Customers.Fields.CustomerRoles.NoRoles")
    }
}

@helper TabAddresses()
{
    <div id="customer-addresses-grid"></div>

    <script>
        $(document).ready(function () {
            $("#customer-addresses-grid").kendoGrid({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("AddressesSelect", "Customer", new { customerId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        },
                        destroy: {
                            url: "@Html.Raw(Url.Action("AddressDelete", "Customer", new { customerId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors",
                        model: {
                            id: "Id"
                        }
                    },
                    error: function (e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    numeric: false,
                    previousNext: false,
                    info: false
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "FirstName",
                    title: "@T("Admin.Address.Fields.FirstName")"
                }, {
                    field: "LastName",
                    title: "@T("Admin.Address.Fields.LastName")"
                }, {
                    field: "Email",
                    title: "@T("Admin.Address.Fields.Email")"
                }, {
                    field: "PhoneNumber",
                    title: "@T("Admin.Address.Fields.PhoneNumber")"
                }, {
                    field: "FaxNumber",
                    title: "@T("Admin.Address.Fields.FaxNumber")"
                }, {
                    field: "AddressHtml",
                    title: "@T("Admin.Address")",
                    encoded: false
                }, {
                    field: "Id",
                    title: "@T("Admin.Common.Edit")",
                    width: 100,
                    template: '<a href="@Url.Content("~/Admin/Customer/AddressEdit?customerId=")@Model.Id&addressid=#=Id#">@T("Admin.Common.Edit")</a>'
                }, {
                    command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                    title: "@T("Admin.Common.Delete")",
                    width: 100
                }]
            });
        });
    </script>
    <p>
        <input type="button" class="k-button" onclick="location.href='@Url.Action("AddressCreate", new { customerId = Model.Id })'" value='@T("Admin.Customers.Customers.Addresses.AddButton")' />
    </p>
}

@helper TabActivityLog()
{
    var defaultGridPageSize = EngineContext.Current.Resolve<Ks.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Ks.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    <table class="adminContent">
        <tr>
            <td>
                <div id="activitylog-grid"></div>

                <script>
                    $(document).ready(function () {
                        $("#activitylog-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("ListActivityLog", "Customer", new { customerId = Model.Id }))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(defaultGridPageSize),
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: [@(gridPageSizes)]
                            },
                            editable: {
                                confirmation: false,
                                mode: "inline"
                            },
                            scrollable: false,
                            columns: [{
                                field: "ActivityLogTypeName",
                                title: "@T("Admin.Customers.Customers.ActivityLog.ActivityLogType")",
                                width: 300,
                            }, {
                                field: "Comment",
                                title: "@T("Admin.Customers.Customers.ActivityLog.Comment")"
                            }, {
                                field: "CreatedOn",
                                title: "@T("Admin.Customers.Customers.ActivityLog.CreatedOn")",
                                width: 200,
                                type: "date",
                                format: "{0:G}"
                            }]
                        });
                    });
                </script>
            </td>
        </tr>
    </table>
}
@helper TabContribution()
{
    var defaultGridPageSize = EngineContext.Current.Resolve<Ks.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Ks.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    if (Model.HasContributions)
    {
        <div class="section-header">
            <div class="title">
                <img src="@Url.Content("~/Administration/Content/images/ico-system.png")" alt="" />
                @T("Admin.Customers.Contributions.Sumamry")
            </div>
        </div>
        <table>
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.AuthorizeDiscount):
                </td>
                <td class="adminData">
                    @Model.AuthorizeDiscount
                </td>
            </tr>
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.TotalPayed):
                </td>
                <td class="adminData">
                    @Model.TotalPayed.ToString("c", new CultureInfo("es-PE"))
                </td>
            </tr>
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.TotalCycle):
                </td>
                <td class="adminData">
                    @(Model.TotalCycle / 12) <small>@T("Common.Year")</small> - @(Model.TotalCycle % 12) <small>@T("Common.Month")</small>
                </td>
            </tr>
        </table>


        <div class="section-header">
            <div class="title">
                <img src="@Url.Content("~/Administration/Content/images/ico-system.png")" alt="" />
                @T("Admin.Customers.Contributions.Details")
            </div>
        </div>
        <table class="adminContent">
            <tr>
                <td>
                    <div id="contributions-grid"></div>

                    <script>
                        $(document).ready(function () {
                            $("#contributions-grid").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("ListContributions", "Customer", new { customerId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors"
                                    },
                                    error: function(e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    pageSize: @(defaultGridPageSize),
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                pageable: {
                                    refresh: true,
                                    pageSizes: [@(gridPageSizes)]
                                },
                                editable: {
                                    confirmation: false,
                                    mode: "inline"
                                },
                                scrollable: false,
                                filterable: true,
                                sortable: true,
                                columns: [
                                    {
                                        field: "Number",
                                        title: "@T("Admin.Contract.ContributionPayments.Fields.Number")",
                                        width: 50
                                    },
                                    @if (Model.IsActiveAmount1)
                                    {
                                        <text>
                                            {
                                                field: "Amount1",
                                                title: "@Model.NameAmount1",
                                                width: 50,
                                                template:'#= kendo.toString(Amount1,"c","es-PE") #',
                                                format:"{0:c2}"
                                            },
                                        </text>
                                    }
                                    @if (Model.IsActiveAmount2)
                                    {
                                        <text>
                                            {
                                                field: "Amount2",
                                                title: "@Model.NameAmount2",
                                                width: 50,
                                                template:'#= kendo.toString(Amount2,"c","es-PE") #',
                                                format:"{0:c2}"
                                            },
                                        </text>
                                    }
                                    @if (Model.IsActiveAmount3)
                                    {
                                        <text>
                                            {
                                                field: "Amount3",
                                                title: "@Model.NameAmount3",
                                                width: 50,
                                                template:'#= kendo.toString(Amount3,"c","es-PE") #',
                                                format:"{0:c2}"
                                            },
                                        </text>
                                    }
                                    {
                                        field: "ScheduledDateOn",
                                        title:"@T("Admin.Contract.ContributionPayments.Fields.ScheduledDateOn")",
                                        width: 80,
                                        filterable: { ui: "datetimepicker" },
                                        template:'#= ScheduledDateOn!=null ? kendo.toString(ScheduledDateOn,"dd/MM/yyyy HH:mm:ss","es-PE"): " "#',
                                        type: "date",
                                        format: "{0:G}"
                                    }, {
                                        field: "ProcessedDateOn",
                                        title:"@T("Admin.Contract.ContributionPayments.Fields.ProcessedDateOn")",
                                        width: 80,
                                        filterable: { ui: "datetimepicker" },
                                        template:'#= ProcessedDateOn!=null ? kendo.toString(ProcessedDateOn,"dd/MM/yyyy HH:mm:ss","es-PE"): " "#',
                                        type: "date",
                                        format: "{0:G}"
                                    },{
                                        field: "State",
                                        title: "@T("Admin.Contract.ContributionPayments.Fields.State")",
                                        width: 100
                                    }]
                            });
                        });
                    </script>

                </td>
            </tr>
        </table>
    }
    else
    {
        <p>
            <input type="button" class="k-button" onclick="location.href='@Url.Action("ContributionCreate", new { customerId = Model.Id })'" value='@T("Admin.Customers.Customers.Contributions.AddButton")' />
        </p>
    }
}

@helper TabLoan()
{
    if (Model.HasLoans)
    {
        var defaultGridPageSize = EngineContext.Current.Resolve<Ks.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
        var gridPageSizes = EngineContext.Current.Resolve<Ks.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

        <table class="adminContent">
            <tr>
                <td>
                    <div id="loan-grid"></div>

                    <script>
                        $(document).ready(function () {

                            $("#loan-grid").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("ListLoans", "Customer", new { customerId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors"
                                    },
                                    error: function(e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    pageSize: @(defaultGridPageSize),
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                pageable: {
                                    refresh: true,
                                    pageSizes: [@(gridPageSizes)]
                                },
                                editable: {
                                    confirmation: false,
                                    mode: "inline"
                                },
                                scrollable: false,
                                filterable: true,
                                sortable: true,
                                columns: [
                                    {
                                        field: "Quota",
                                        title: "N° Couta",
                                        width: 50
                                    },{
                                        field: "MonthlyQuota",
                                        title: "Cuota Mensual",
                                        width: 50,
                                        template:'#= kendo.toString(MonthlyQuota,"c","es-PE") #',
                                        format:"{0:c2}"
                                    },{
                                        field: "MonthlyFee",
                                        title: "Interes",
                                        width: 50,
                                        template:'#= kendo.toString(MonthlyFee,"c","es-PE") #',
                                        format:"{0:c2}"
                                    },{
                                        field: "MonthlyCapital",
                                        title: "Capital",
                                        width: 50,
                                        template:'#= kendo.toString(MonthlyCapital,"c","es-PE") #',
                                        format:"{0:c2}"
                                    },{
                                        field: "ScheduledDateOnUtc",
                                        title:"@T("Admin.Contract.ContributionPayments.Fields.ScheduledDateOnUtc")",
                                        width: 80,
                                        filterable: { ui: "datetimepicker" },
                                        template:'#= ScheduledDateOnUtc!=null ? kendo.toString(ScheduledDateOnUtc,"dd/MM/yyyy HH:mm:ss","es-PE"): " "#',
                                        type: "date",
                                        format: "{0:G}"
                                    }, {
                                        field: "ProcessedDateOnUtc",
                                        title:"@T("Admin.Contract.ContributionPayments.Fields.ProcessedDateOnUtc")",
                                        width: 80,
                                        filterable: { ui: "datetimepicker" },
                                        template:'#= ProcessedDateOnUtc!=null ? kendo.toString(ProcessedDateOnUtc,"dd/MM/yyyy HH:mm:ss","es-PE") :" "#',
                                        type: "date",
                                        format: "{0:G}"
                                    },{
                                        field: "State",
                                        title: "@T("Admin.Contract.ContributionPayments.Fields.State")",
                                        width: 100
                                    }]
                            });
                        });
                    </script>

                </td>
            </tr>
        </table>
    }
    else
    {
        <p>
            <input type="button" class="k-button" onclick="location.href='@Url.Action("LoanCreate", new { customerId = Model.Id })'" value='@T("Admin.Customers.Customers.Loan.AddButton")' />
        </p>
    }
}