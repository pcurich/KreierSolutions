@using System.Globalization
@model CustomerModel
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.Active)

<script>
    $(document).ready(function() {
        $("#customer-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>

<div id="customer-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Customers.Customers.Info")
        </li>
        @if (Model.Id > 0)
        {
            <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.CustomerRoles")
            </li>
            <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.ActivityLog")
            </li>
            if (Model.Active)
            {
                <li @Html.RenderSelectedTabIndex(4, GetSelectedTabIndex())>
                    @T("Admin.Customers.Customers.Contributions")
                </li>
            }

            if (Model.HasContributions)
            {
                <li @Html.RenderSelectedTabIndex(5, GetSelectedTabIndex())>
                    @T("Admin.Customers.Customers.Loan")
                </li>
                <li @Html.RenderSelectedTabIndex(6, GetSelectedTabIndex())>
                    @T("Admin.Customers.Customers.Benefit")
                </li>
            }
        }
    </ul>
    <div>
        @TabInfo()
    </div>

    @if (Model.Id > 0)
    {
        <div>
            @TabCustomerRoles()
        </div>
        <div>
            @TabActivityLog()
        </div>
        if (Model.Active)
        {
            <div>
                @TabContribution()
            </div>
        }
        if (Model.HasContributions)
        {
            <div>
                @TabLoan()
            </div>
            <div>
                @TabBenefits()
            </div>
        }
    }

</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "customer-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    if (Model.CountryEnabled && Model.StateProvinceEnabled)
    {
        <script type="text/javascript">
            $(document).ready(function() {
                $("#@Html.FieldIdFor(model => model.CountryId)").change(function() {
                    var selectedItem = $(this).val();
                    var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");

                    var postData = {
                        countryId: selectedItem,
                        addSelectStateItem: "true"
                    };

                    $.ajax({
                        cache: false,
                        type: "GET",
                        url: "@Url.Action("GetStatesByCountryId", "Country")",
                        data: postData,
                        success: function(data) {
                            ddlStates.html('');
                            $.each(data, function(id, option) {
                                ddlStates.append($('<option></option>').val(option.id).html(option.name));
                            });
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve states.');
                        }
                    });
                });

                $("#@Html.FieldIdFor(model => model.StateProvinceId)").change(function() {
                    var selectedItem = $(this).val();
                    var ddlCities = $("#@Html.FieldIdFor(model => model.CityId)");

                    var postData = {
                        stateProvinceId: selectedItem,
                        addSelectCityItem: "true"
                    };

                    $.ajax({
                        cache: false,
                        type: "GET",
                        url: "@Url.Action("GetCityByStateProvinceId", "Country")",
                        data: postData,
                        success: function(data) {
                            ddlCities.html('');
                            $.each(data, function(id, option) {
                                ddlCities.append($('<option></option>').val(option.id).html(option.name));
                            });
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve states.');
                        }
                    });
                });
            });
        </script>
    }
    <table class="adminContent customer-info-tab">
        @if (Model.UsernamesEnabled)
        {
            if (Model.Id == 0 || Model.AllowUsersToChangeUsernames)
            {
                <tr>
                    <td class="adminTitle">
                        @Html.KsLabelFor(model => model.Username):
                    </td>
                    <td class="adminData">
                        @Html.EditorFor(model => model.Username)
                        @Html.ValidationMessageFor(model => model.Username)
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td class="adminTitle">
                        @Html.KsLabelFor(model => model.Username):
                    </td>
                    <td class="adminData">
                        @Model.Username
                        @Html.HiddenFor(model => model.Username)
                    </td>
                </tr>
            }
        }
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.Email):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email)
            </td>
        </tr>
        @*<tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.Password):
                </td>
                <td class="adminData">
                    @Html.TextBoxFor(model => model.Password, new { autocomplete = "off", @class = "text-box single-line" })
                    @Html.ValidationMessageFor(model => model.Password)
                    @if (Model.Id > 0)
                    {
                        <input type="submit" name="changepassword" class="k-button" value="@T("Admin.Customers.Customers.Fields.Password.Change")" />
                    }
                </td>
            </tr>*@
        @if (Model.GenderEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.Gender):
                </td>
                <td class="adminData">
                    <div class="gender">
                        @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "Gender_Male" })
                        <label class="forcheckbox" for="Gender_Male">@T("Admin.Customers.Customers.Fields.Gender.Male")</label>
                    </div>
                    <div class="gender">
                        @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "Gender_Female" })
                        <label class="forcheckbox" for="Gender_Female">@T("Admin.Customers.Customers.Fields.Gender.Female")</label>
                    </div>
                    @if (Model.GenderRequired)
                    {
                        @Html.RequiredHint()
                    }
                </td>

            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.FirstName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.FirstName)
                @Html.RequiredHint()
                @Html.ValidationMessageFor(model => model.FirstName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.LastName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LastName)
                @Html.RequiredHint()
                @Html.ValidationMessageFor(model => model.LastName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.AdmCode):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AdmCode)
                @Html.RequiredHint()
                @Html.ValidationMessageFor(model => model.AdmCode)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.Dni):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Dni)
                @Html.RequiredHint()
                @Html.ValidationMessageFor(model => model.Dni)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.MilitarySituationId):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.MilitarySituationId, Model.AvailableMilitarySituations)
                <script>
                    $(document).ready(function() {
                        $('#@Html.FieldIdFor(model => model.MilitarySituationId)').width(250).kendoDropDownList();
                    });
                </script>
                @Html.RequiredHint()
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.DateOfAdmission):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DateOfAdmission)
                @Html.RequiredHint()
                @Html.ValidationMessageFor(model => model.DateOfAdmission)
            </td>
        </tr>
        @if (Model.DateOfBirthEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.DateOfBirth):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.DateOfBirth)
                    @if (Model.DateOfBirthRequired)
                    {
                        @Html.RequiredHint()
                    }
                    @Html.ValidationMessageFor(model => model.DateOfBirth)
                </td>
            </tr>
        }
        @if (Model.StreetAddressEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.StreetAddress):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.StreetAddress)
                    @Html.ValidationMessageFor(model => model.StreetAddress)
                </td>
            </tr>
        }
        @if (Model.StreetAddress2Enabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.StreetAddress2):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.StreetAddress2)
                    @Html.ValidationMessageFor(model => model.StreetAddress2)
                </td>
            </tr>
        }

        @if (Model.CountryEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.CountryId):
                </td>
                <td class="adminData">
                    @Html.DropDownListFor(model => model.CountryId, Model.AvailableCountries)
                    @Html.ValidationMessageFor(model => model.CountryId)
                    @*<script>
                        $(document).ready(function () {
                            $('#@Html.FieldIdFor(model => model.CountryId)').width(250).kendoDropDownList();
                        });
                    </script>*@
                </td>
            </tr>
        }
        @if (Model.CountryEnabled && Model.StateProvinceEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.StateProvinceId):
                </td>
                <td class="adminData">
                    @Html.DropDownListFor(model => model.StateProvinceId, Model.AvailableStates)
                    @Html.ValidationMessageFor(model => model.StateProvinceId)
                    @*<script>
                        $(document).ready(function () {
                            $('#@Html.FieldIdFor(model => model.StateProvinceId)').width(250).kendoDropDownList();
                        });
                    </script>*@
                </td>
            </tr>
        }
        @if (Model.CountryEnabled && Model.StateProvinceEnabled && Model.CityEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.CityId):
                </td>
                <td class="adminData">
                    @Html.DropDownListFor(model => model.CityId, Model.AvailableCities)
                    @Html.ValidationMessageFor(model => model.CityId)
                    @*<script>
                        $(document).ready(function () {
                            $('#@Html.FieldIdFor(model => model.CityId)').width(250).kendoDropDownList();
                        });
                    </script>*@
                </td>
            </tr>
        }
        @if (Model.PhoneEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.Phone):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Phone)
                    @Html.ValidationMessageFor(model => model.Phone)
                </td>
            </tr>
        }
        @if (Model.FaxEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.Fax):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Fax)
                    @Html.ValidationMessageFor(model => model.Fax)
                </td>
            </tr>
        }
        @if (Model.CustomerAttributes.Count > 0)
        {
            @Html.Partial("_CustomerAttributes", Model.CustomerAttributes)
        }
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.AdminComment):
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.AdminComment, new { style = "Width: 250px; Height: 150px;" })
                @Html.ValidationMessageFor(model => model.AdminComment)
            </td>
        </tr>
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.LastIpAddress):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.LastIpAddress)
                </td>
            </tr>
        }
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.CreatedOn):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.CreatedOn)
                </td>
            </tr>
        }
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.LastActivityDate):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.LastActivityDate)
                </td>
            </tr>
        }
        @if (Model.Id > 0 && !String.IsNullOrEmpty(Model.LastVisitedPage))
        {
            <tr>
                <td class="adminTitle">
                    @Html.KsLabelFor(model => model.LastVisitedPage):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.LastVisitedPage)
                </td>
            </tr>
        }
    </table>
}

@helper TabCustomerRoles()
{
    if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
    {
        foreach (var customerRole in Model.AvailableCustomerRoles)
        {
            <div>
                <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id" checked="@(Model.SelectedCustomerRoleIds != null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))" />@customerRole.Name
            </div>
        }
    }
    else
    {
        @T("Admin.Customers.Customers.Fields.CustomerRoles.NoRoles")
    }
}

@helper TabActivityLog()
{
    var defaultGridPageSize = EngineContext.Current.Resolve<Ks.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Ks.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    <table class="adminContent">
        <tr>
            <td>
                <div id="activitylog-grid"></div>

                <script>
                    $(document).ready(function () {
                        $("#activitylog-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("ListActivityLog", "Customer", new { customerId = Model.Id }))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(defaultGridPageSize),
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: [@(gridPageSizes)]
                            },
                            editable: {
                                confirmation: false,
                                mode: "inline"
                            },
                            scrollable: false,
                            columns: [{
                                field: "ActivityLogTypeName",
                                title: "@T("Admin.Customers.Customers.ActivityLog.ActivityLogType")",
                                width: 300,
                            }, {
                                field: "Comment",
                                title: "@T("Admin.Customers.Customers.ActivityLog.Comment")"
                            }, {
                                field: "CreatedOn",
                                title: "@T("Admin.Customers.Customers.ActivityLog.CreatedOn")",
                                width: 200,
                                type: "date",
                                format: "{0:G}"
                            }]
                        });
                    });
                </script>
            </td>
        </tr>
    </table>
}
@helper TabContribution()
{
    if (Model.HasContributions)
    {
        <div class="section-header">
            <div class="title">
                <img src="@Url.Content("~/Administration/Content/images/ico-system.png")" alt="" />
                @T("Admin.Customers.Contributions.Sumamry")
            </div>
        </div>
        <div style="width: 100%">
            <div style="width: 40%; float: left;">
                <table>
                    <tr>
                        <td class="adminTitle">
                            @Html.KsLabelFor(model => model.Contribution.AuthorizeDiscount):
                        </td>
                        <td class="adminData">
                            @Model.Contribution.AuthorizeDiscount
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.KsLabelFor(model => model.Contribution.AmountMeta):
                        </td>
                        <td class="adminData">
                            @Model.Contribution.AmountMeta.ToString("c", new CultureInfo("es-PE"))
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.KsLabelFor(model => model.Contribution.AmountPayed):
                        </td>
                        <td class="adminData">
                            @Model.Contribution.AmountPayed.ToString("c", new CultureInfo("es-PE"))
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.KsLabelFor(model => model.Contribution.TotalOfCycles):
                        </td>
                        <td class="adminData">
                            @(Model.Contribution.TotalOfCycles / 12) <small>@T("Common.Year")</small> - @(Model.Contribution.TotalOfCycles % 12) <small>@T("Common.Month")</small>
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.KsLabelFor(model => model.Contribution.DelayCycles):
                        </td>
                        <td class="adminData">
                            @(Model.Contribution.DelayCycles / 12) <small>@T("Common.Year")</small> - @(Model.Contribution.DelayCycles % 12) <small>@T("Common.Month")</small>
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.KsLabelFor(model => model.Contribution.Description):
                        </td>
                        <td class="adminData">
                            @(Model.Contribution.Description)
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.KsLabelFor(model => model.Contribution.CreatedOn):
                        </td>
                        <td class="adminData">
                            @(Model.Contribution.CreatedOn)
                        </td>
                    </tr>

                    <tr>
                        <td class="adminTitle">
                            @Html.KsLabelFor(model => model.Contribution.UpdatedOn):
                        </td>
                        <td class="adminData">
                            @(Model.Contribution.UpdatedOn)
                        </td>
                    </tr>

                </table>
            </div>
            <div style="width: 60%; float: right;">
                @Html.Partial("_CreateOrUpdateChartContribution", Model.Contribution)
            </div>
        </div>

    }
    else
    {
        <p>
            <input type="button" class="k-button" onclick="location.href='@Url.Action("ContributionCreate", new { customerId = Model.Id })'" value='@T("Admin.Customers.Customers.Contributions.AddButton")' />
        </p>
    }
}

@helper TabLoan()
{
    if (Model.HasLoans)
    {
        <ul id="panelbarloans">
            @{
        foreach (var loan in Model.LoanModels)
        {
            var loan1 = loan;
            <li>
                <span class="k-link">@loan.LoanNumber</span>
                <div style="padding: 10px;">
                    <table class="adminContent">
                        <tr>
                            <td class="adminTitle">
                                @Html.KsLabelFor(model => loan1.Period):
                            </td>
                            <td class="adminData">
                                @loan1.Period - (@T("Common.Month"))
                            </td>
                            <td class="adminTitle">
                                @Html.KsLabelFor(model => loan1.LoanAmount):
                            </td>
                            <td class="adminData">
                                @loan1.LoanAmount.ToString("c", new CultureInfo("es-PE"))
                            </td>
                        </tr>
                        <tr>
                            <td class="adminTitle">
                                @Html.KsLabelFor(model => loan1.Tea):
                            </td>
                            <td class="adminData">
                                @loan1.Tea %
                            </td>
                            <td class="adminTitle">
                                @Html.KsLabelFor(model => loan1.Safe):
                            </td>
                            <td class="adminData">
                                @loan1.Safe %
                            </td>
                        </tr>
                        <tr>
                            <td class="adminTitle">
                                @Html.KsLabelFor(model => loan1.TotalFeed):
                            </td>
                            <td class="adminData">
                                @loan1.TotalFeed.ToString("c", new CultureInfo("es-PE"))
                            </td>
                            <td class="adminTitle">
                                @Html.KsLabelFor(model => loan1.TotalSafe):
                            </td>
                            <td class="adminData">
                                @loan1.TotalSafe.ToString("c", new CultureInfo("es-PE"))
                            </td>
                        </tr>
                        <tr>
                            <td class="adminTitle">
                                @Html.KsLabelFor(model => loan1.MonthlyQuota):
                            </td>
                            <td class="adminData">
                                @loan1.MonthlyQuota.ToString("c", new CultureInfo("es-PE"))
                            </td>
                            <td class="adminTitle">
                                @Html.KsLabelFor(model => loan1.TotalAmount):
                            </td>
                            <td class="adminData">
                                @loan1.TotalAmount.ToString("c", new CultureInfo("es-PE"))
                            </td>
                        </tr>
                        <tr>
                            <td class="adminTitle">
                                @Html.KsLabelFor(model => loan1.TotalToPay):
                            </td>
                            <td class="adminData">
                                @loan1.TotalToPay.ToString("c", new CultureInfo("es-PE"))
                            </td>
                        </tr>
                    </table>
                </div>
            </li>

        }
            }
        </ul>

        <script>
            $(document).ready(function() {
                $("#panelbarloans").kendoPanelBar({
                    expandMode: "multiple"
                });
            });
        </script>
    }
    <p>
        <input type="button" class="k-button" onclick="location.href='@Url.Action("LoanCreate", new {customerId = Model.Id})' " value='@T("Admin.Customers.Customers.Loan.AddButton")' />
    </p>
}

@helper TabBenefits()
{
    @Html.Partial("_CreateOrUpdateBenefit", Model)
}

