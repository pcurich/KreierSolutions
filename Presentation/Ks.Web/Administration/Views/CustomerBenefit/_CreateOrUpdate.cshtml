@model ContributionBenefitModel
@using System.Globalization
@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.CustomerId)
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.TotalToPay)


<script>
    $(document).ready(function () {
        $("#customer-benefit-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>

<div id="customer-benefit-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Customers.Customers.Benefit.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            Aportaciones
        </li>
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            Apoyo Social Económico
        </li>
        @{
            if (Model.Id > 0)
            {
                <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
                    @T("Admin.Customers.Customers.Benefit.Checks")
                </li>
            }
        }
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabContribution()
    </div>
    <div>
        @TabLoan()
    </div>
    @{
        if (Model.Id > 0)
        {
            <div>
                @TabChecks()
            </div>
        }
    }
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "customer-benefit-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}


@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.CustomerCompleteName):
            </td>
            <td class="adminData">
                @Model.CustomerCompleteName
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.CustomerDni):
            </td>
            <td class="adminData">
                @Model.CustomerDni
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.CustomerAdmCode):
            </td>
            <td class="adminData">
                @Model.CustomerAdmCode
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.ContributionStart):
            </td>
            <td class="adminData">
                @Model.ContributionStart.ToShortDateString()
            </td>
        </tr>
        @{
            if (Model.Id > 0)
            {
                <tr>
                    <td class="adminTitle">
                        @Html.KsLabelFor(model => model.Discount):
                    </td>
                    <td class="adminData">
                        @Model.Discount.ToString("p")
                    </td>
                </tr>
            }
        }
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.YearInActivity):
            </td>
            <td class="adminData">
                @Model.YearInActivity
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.TabValue):
            </td>
            <td class="adminData">
                @Model.TabValue
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.BenefitId):
            </td>
            <td class="adminData">
                @{
                    if (Model.Id > 0)
                    {
                        @Model.BenefitName
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.BenefitId, Model.BenefitModels)
                        <script>
                            $(document).ready(function() {
                                $("#@Html.FieldIdFor(model => model.BenefitId)").width(200).kendoDropDownList();
                            });
                        </script>
                    }
                }

            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.AmountBaseOfBenefit):
            </td>
            <td class="adminData">
                @Html.HiddenFor(model => model.AmountBaseOfBenefit)
                @Model.AmountBaseOfBenefit.ToString("c", new CultureInfo("es-PE"))
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.SubTotalToPay):
            </td>
            <td class="adminData">
                @Model.SubTotalToPay.ToString("c", new CultureInfo("es-PE"))
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.TotalToPay):
            </td>
            <td class="adminData">
                @Model.TotalToPay.ToString("c", new CultureInfo("es-PE"))
            </td>
        </tr>
        @{if (!string.IsNullOrEmpty(Model.CustomField1))
        {
            <tr>
                <td class="adminTitle">
                    @Model.CustomField1:
                    @Html.HiddenFor(model => model.CustomField1)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.CustomValue1)
                </td>
            </tr>
        }
        }

        @{if (!string.IsNullOrEmpty(Model.CustomField2))
        {
            <tr>
                <td class="adminTitle">
                    @Model.CustomField2:
                    @Html.HiddenFor(model => model.CustomField2)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.CustomValue2)
                </td>
            </tr>
        }
        }
    </table>
}

@helper TabContribution()
{
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.TotalContributionCopere):
            </td>
            <td class="adminData">
                @Html.HiddenFor(model => model.TotalContributionCopere)
                @Model.TotalContributionCopere.ToString("c", new CultureInfo("es-PE"))
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.TotalContributionCaja):
            </td>
            <td class="adminData">
                @Html.HiddenFor(model => model.TotalContributionCaja)
                @Model.TotalContributionCaja.ToString("c", new CultureInfo("es-PE"))
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.TotalContributionPersonalPayment):
            </td>
            <td class="adminData">
                @Html.HiddenFor(model => model.TotalContributionPersonalPayment)
                @Model.TotalContributionPersonalPayment.ToString("c", new CultureInfo("es-PE"))
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.ReserveFund):
            </td>
            <td class="adminData">
                @Model.ReserveFund.ToString("c", new CultureInfo("es-PE"))
            </td>
        </tr>
    </table>
}

@helper TabLoan()
{
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.TotalLoan):
            </td>
            <td class="adminData">
                @Model.TotalLoan
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.TotalLoanToPay):
            </td>
            <td class="adminData">
                @Model.TotalLoanToPay.ToString("c", new CultureInfo("es-PE"))
            </td>
        </tr>
    </table>
}

@helper TabChecks()
{
    <table class="adminContent">
        <tr>
            <td>
                <div id="tabdetails-grid"></div>
                <script>
                    $(document).ready(function () {
                        $("#tabdetails-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("BankCheckList", "CustomerBenefit", new { contributionBenefitId = Model.Id }))",
                                        type: "POST",
                                        dataType: "json",
                                        contentType: "application/json"
                                        //any-forgery does not work with this contentType for some reasons
                                        //data: addAntiForgeryToken
                                    },
                                    create: {
                                        url: "@Html.Raw(Url.Action("BankCheckAdd", "CustomerBenefit"))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    },
                                    destroy: {
                                        url: "@Html.Raw(Url.Action("BankCheckDelete", "CustomerBenefit"))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    },
                                    parameterMap: function (data, operation) {
                                        if (operation != "read") {
                                            return data;
                                        } else {
                                            //for some reasons only such "Filter" data be parsed
                                            return JSON.stringify(data);
                                        }
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors",
                                    model: {
                                        id: "Id",
                                        fields: {
                                            ContributionBenefitId:{editable: true,type: "number", defaultValue: @Model.Id },
                                            TotalToPay:{editable: false, type: "number", defaultValue: @Model.TotalToPay },
                                            RelationShip:{editable: true,type: "string"},
                                            RelationShipId:{editable: true,type: "number"},
                                            CompleteName:{editable: true,type: "string"},
                                            Dni:{editable: true,type: "string"},
                                            AccountNumber:{editable: false,type: "string"},
                                            Bank:{editable: true,type: "string"},
                                            BankId:{editable: true,type: "string"},
                                            CheckNumber:{editable: true,type: "string"},
                                            Ratio:{editable: true,type: "number"},
                                            AmountToPay:{editable: false,type: "number"},
                                            CreatedOn:{editable: false,type: "date"},
                                            Approved:{editable: false,type: "boolean"},
                                            Id: { editable: false, type: "number" }
                                        }
                                    }
                                },
                                requestEnd: function (e) {
                                    if (e.type == "create" || e.type == "update") {
                                        this.read();
                                    }
                                },
                                error: function (e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                numeric: false,
                                previousNext: false,
                                info: false
                            },
                            editable: {
                                confirmation: false,
                                mode: "popup"
                            },
                            scrollable: true,
                            toolbar: [{ name: "create", text: "@T("Admin.Common.AddNewRecord")" }],
                            edit: function(e) {
                                if (e.model.isNew()) {
                                    //little hack here
                                    //pre-select the first value of kendoui dropdownlist datasource
                                    //for some reasons (maybe, bug) it always sends 0
                                    //if no value has been selected (changed) in the dropdownlist
                                    if (allBanks.length > 0) {
                                        e.model.BankName = allBanks[0].Id;
                                    }
                                }
                            },
                            columns: [
                                {
                                    field: "RelationShipId",
                                    title: "@T("Admin.Configuration.ContributionBenefitBank.RelationShip")",
                                    editor: relationShipDropDownEditor,
                                    template: "#:RelationShip#"
                                },{
                                    field: "CompleteName",
                                    title: "@T("Admin.Configuration.ContributionBenefitBank.CompleteName")",
                                },{
                                    field: "Dni",
                                    title: "@T("Admin.Configuration.ContributionBenefitBank.Dni")",
                                },{
                                    field: "AccountNumber",
                                    title: "@T("Admin.Configuration.ContributionBenefitBank.AccountNumber")"
                                },{
                                    field: "BankId",
                                    title: "@T("Admin.Configuration.ContributionBenefitBank.Bank")",
                                    editor: banksDropDownEditor,
                                    template: "#:Bank#"
                                }, {
                                    field: "CheckNumber",
                                    title: "@T("Admin.Configuration.ContributionBenefitBank.CheckNumber")"
                                }, {
                                    field: "Ratio",
                                    title: "@T("Admin.Configuration.ContributionBenefitBank.Ratio")",
                                    format: "{0:p2}",
                                    width:100,
                                    editor: function(container, options) {
                                        $("<input name='Ratio'>")
                                        .appendTo(container)
                                        .kendoNumericTextBox(
                                          {
                                              format: "p2",
                                              decimals: 4
                                          });
                                    }
                                }, {
                                    field: "AmountToPay",
                                    title: "@T("Admin.Configuration.ContributionBenefitBank.AmountToPay")",
                                    template: '#= kendo.toString(AmountToPay,"c","es-PE") #',
                                    format: "{0:c2}",
                                    width: 100
                                }, {
                                    field: "Approved",
                                    title: "@T("Admin.Configuration.ContributionBenefitBank.Approved")",
                                    width: 100,
                                    headerAttributes: { style: "text-align:center" },
                                    attributes: { style: "text-align:center" },
                                    template: '<img src="@Url.Content("~/Administration/Content/images/")active-#=Approved#.gif" />'
                                },{
                                    command: [{
                                        name: "destroy",
                                        text: "@T("Admin.Common.Delete")"
                                    }],
                                    width: 100,
                                    filterable: false
                                }]
                        });
                    });

                    var allBanks = [
                        @for (int i = 0; i < Model.Banks.Count; i++)
                        {
                            var bankItem = Model.Banks[i];
                            <text>
                                {
                                    Id:@(bankItem.Value),
                                    Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(bankItem.Text)))"
                                }
                            </text>
                            if (i != Model.Banks.Count - 1)
                                {
                                    <text>,</text>
                                }
                        }
                    ];

                    var allRelationShip = [
                        @for (int i = 0; i < Model.RelaTionShips.Count; i++)
                    {
                        var relationShipItem = Model.RelaTionShips[i];
                        <text>
                            {
                                Id:@(relationShipItem.Value),
                                Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(relationShipItem.Text)))"
                            }
                        </text>
                        if (i != Model.RelaTionShips.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function relationShipDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:RelationShipId"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: allRelationShip
                            });
                    };

                    function banksDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:BankId"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: allBanks
                            });
                    }

                </script>
            </td>

        </tr>
    </table>
}