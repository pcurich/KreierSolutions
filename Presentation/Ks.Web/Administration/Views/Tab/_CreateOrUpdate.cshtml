@model TabModel
@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function () {
        $("#tab-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>
<div id="tab-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Configuration.Tabs.Info")
        </li>
        @{
            if (Model.Id > 0 )
            {
                <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
                    @T("Admin.Configuration.Tabs.TabValues")
                </li>
            }
        }
    </ul>
    <div>
        @TabInfo()
    </div>
    @{
        if (Model.Id>0 )
        {
            <div>
                @TabValues()
            </div>
        }
    }
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "tab-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.Name):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.AmountBase):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AmountBase)
                @Html.ValidationMessageFor(model => model.AmountBase)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.IsActive):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.IsActive)
                @Html.ValidationMessageFor(model => model.IsActive)
            </td>
        </tr>
        @{
            if (Model.Id > 0)
            {
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.CreatedOn):
            </td>
            <td class="adminData">
                @Model.CreatedOn
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.KsLabelFor(model => model.UpdatedOn):
            </td>
            <td class="adminData">
                @Model.UpdatedOn
            </td>
        </tr>
            }
        }
    </table>
}

@helper TabValues()
{
    <table class="adminContent">
        <tr>
            <td>
                <div id="tabdetails-grid"></div>
                <script>
                    $(document).ready(function () {
                        $("#tabdetails-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("ListDetails", "Tab", new {tabId = Model.Id}))",
                                        type: "POST",
                                        dataType: "json",
                                        contentType: "application/json"
                                        //any-forgery does not work with this contentType for some reasons
                                        //data: addAntiForgeryToken
                                    },
                                    create: {
                                        url: "@Html.Raw(Url.Action("TabDetailAdd", "Tab"))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    },
                                    update: {
                                        url: "@Html.Raw(Url.Action("TabDetailUpdate", "Tab"))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    },
                                    destroy: {
                                        url: "@Html.Raw(Url.Action("TabDetailDelete", "Tab"))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    },
                                    parameterMap: function (data, operation) {
                                        if (operation != "read") {
                                            return data;
                                        } else {
                                            //for some reasons only such "Filter" data be parsed
                                            return JSON.stringify(data);
                                        }
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors",
                                    model: {
                                        id: "Id",
                                        fields: {
                                            TabId: { editable: true, type: "number", defaultValue: @Model.Id },
                                            YearInActivity: { editable: true, type: "number" },
                                            TabValueS: { editable: true, type: "string" },
                                            CreatedOn: { editable: false, type: "date" },
                                            UpdatedOn: { editable: false, type: "date" },
                                            Id: { editable: false, type: "number" }
                                        }
                                    }
                                },
                                requestEnd: function (e) {
                                    if (e.type == "create" || e.type == "update") {
                                        this.read();
                                    }
                                },
                                error: function (e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                numeric: false,
                                previousNext: false,
                                info: false
                            },
                            editable: {
                                confirmation: false,
                                mode: "inline"
                            },
                            scrollable: true,
                            toolbar: [{ name: "create", text: "@T("Admin.Common.AddNewRecord")" }],
                            columns: [{
                                field: "YearInActivity",
                                title: "@T("Admin.Configuration.TabDetails.Fields.YearInActivity")"
                            }, {
                                field: "TabValueS",
                                title: "@T("Admin.Configuration.TabDetails.Fields.TabValue")"
                            }, {
                                field: "CreatedOn",
                                title: "@T("Admin.Configuration.TabDetails.Fields.CreatedOn")",
                                template: '#= CreatedOn!=null ? kendo.toString(CreatedOn,"dd/MM/yyyy","es-PE"): " "#',
                                type: "date",
                                format: "{0:G}"
                            }, {
                                field: "UpdatedOn",
                                title: "@T("Admin.Configuration.TabDetails.Fields.UpdatedOn")",
                                template: '#= UpdatedOn!=null ? kendo.toString(UpdatedOn,"dd/MM/yyyy","es-PE"): " "#',
                                type: "date",
                                format: "{0:G}"
                            }, {
                                command: [{
                                    name: "edit",
                                    text: {
                                        edit: "@T("Admin.Common.Edit")",
                                        update: "@T("Admin.Common.Update")",
                                        cancel: "@T("Admin.Common.Cancel")"
                                    }
                                }, {
                                    name: "destroy",
                                    text: "@T("Admin.Common.Delete")"
                                }],
                                width: 200,
                                filterable: false
                            }]
                        });
                    });
                </script>
            </td>
        </tr>
    </table>
}
