using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Text;
using Ks.Core.Domain.Directory;
using System.IO;
using System.Linq;
using Ks.Core;
using Ks.Core.Domain;
using Ks.Core.Domain.Batchs;
using Ks.Core.Domain.Contract;
using Ks.Core.Domain.Customers;
using Ks.Core.Domain.Reports;
using Ks.Services.Customers;
using Ks.Services.Helpers;
using Ks.Services.KsSystems;
using OfficeOpenXml;
using OfficeOpenXml.Style;

namespace Ks.Services.ExportImport
{
    /// <summary>
    /// Export manager
    /// </summary>
    public partial class ExportManager : IExportManager
    {
        #region Fields

        private readonly IKsSystemService _ksSystemService;
        private readonly KsSystemInformationSettings _ksSystemInformationSettings;
        private readonly IWebHelper _webHelper;
        private readonly IDateTimeHelper _dateTimeHelper;
        private readonly ICustomerAttributeService _customerAttributeService;

        private readonly SignatureSettings _signatureSettings;

        #endregion

        #region Ctor

        public ExportManager(IKsSystemService ksSystemService,
            KsSystemInformationSettings ksSystemInformationSettings,
            ICustomerAttributeService customerAttributeService,
            IWebHelper webHelper, IDateTimeHelper dateTimeHelper, SignatureSettings signatureSettings)
        {
            _ksSystemService = ksSystemService;
            _ksSystemInformationSettings = ksSystemInformationSettings;
            _webHelper = webHelper;
            _dateTimeHelper = dateTimeHelper;
            _customerAttributeService = customerAttributeService;
            _signatureSettings = signatureSettings;
        }

        #endregion

        private const String IMAGE =
            "";

        private const String ESCUDO =
            "";

        #region Methods

        /// <summary>
        /// Export states to TXT
        /// </summary>
        /// <param name="states">States</param>
        /// <returns>Result in TXT (string) format</returns>
        public virtual string ExportStatesToTxt(IList<StateProvince> states)
        {
            if (states == null)
                throw new ArgumentNullException("states");

            const string SEPARATOR = ",";
            var sb = new StringBuilder();
            foreach (var state in states)
            {
                sb.Append(state.Country.TwoLetterIsoCode);
                sb.Append(SEPARATOR);
                sb.Append(state.Name);
                sb.Append(SEPARATOR);
                sb.Append(state.Abbreviation);
                sb.Append(SEPARATOR);
                sb.Append(state.Published);
                sb.Append(SEPARATOR);
                sb.Append(state.DisplayOrder);
                sb.Append(Environment.NewLine);  //new line
            }
            return sb.ToString();
        }

        public virtual void ExportReportContributionPaymentToXlsx(Stream stream, Customer customer, Contribution contribution, IList<ReportContributionPayment> reportContributionPayment)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add("Aportaciones");
                try
                {
                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e) { }

                #region Summary
                worksheet.Cells["A6:B8"].Style.Font.Bold = true;
                worksheet.Cells["G6:H8"].Style.Font.Bold = true;

                worksheet.Cells["A6:B6"].Merge = true;
                worksheet.Cells["A6"].Value = "Aportante:";
                worksheet.Cells["C6:E6"].Merge = true;
                worksheet.Cells["C6"].Value = customer.GetFullName();
                worksheet.Cells["A7:B7"].Merge = true;
                worksheet.Cells["A7"].Value = "Dni:";
                worksheet.Cells["C7"].Value = customer.GetGenericAttribute(SystemCustomerAttributeNames.Dni);
                worksheet.Cells["A8:B8"].Merge = true;
                worksheet.Cells["A8"].Value = "N° Adm:";
                worksheet.Cells["C8"].Value = customer.GetGenericAttribute(SystemCustomerAttributeNames.AdmCode);

                worksheet.Cells["G6:H6"].Merge = true;
                worksheet.Cells["G6"].Value = "Monto:";
                worksheet.Cells["I6"].Value = contribution.AmountPayed.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells["G7:H7"].Merge = true;
                worksheet.Cells["G7"].Value = "Aportante desde:";
                worksheet.Cells["I7"].Value = _dateTimeHelper.ConvertToUserTime(contribution.CreatedOnUtc, TimeZoneInfo.Utc).ToShortDateString();

                worksheet.Cells["G8:H8"].Merge = true;
                worksheet.Cells["G8"].Value = "Ultimo Pago:";
                if (contribution.UpdatedOnUtc.HasValue)
                    worksheet.Cells["I8"].Value = _dateTimeHelper.ConvertToUserTime(contribution.UpdatedOnUtc.Value, TimeZoneInfo.Utc).ToShortDateString();
                #endregion

                #region Leyend

                worksheet.Cells["M3:M8"].Style.Font.Bold = true;
                worksheet.Cells["L3"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells["L3"].Style.Fill.BackgroundColor.SetColor(GetColor(1, ((int)ContributionState.Pendiente)));
                worksheet.Cells["M3:N3"].Merge = true;
                worksheet.Cells["M3"].Value = ContributionState.Pendiente.ToString();
                worksheet.Cells["L4"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells["L4"].Style.Fill.BackgroundColor.SetColor(GetColor(1, ((int)ContributionState.EnProceso)));
                worksheet.Cells["M4:N4"].Merge = true;
                worksheet.Cells["M4"].Value = ContributionState.EnProceso.ToString();
                worksheet.Cells["L5"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells["L5"].Style.Fill.BackgroundColor.SetColor(GetColor(1, ((int)ContributionState.PagoParcial)));
                worksheet.Cells["M5:N5"].Merge = true;
                worksheet.Cells["M5"].Value = ContributionState.PagoParcial.ToString();
                worksheet.Cells["L6"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells["L6"].Style.Fill.BackgroundColor.SetColor(GetColor(1, ((int)ContributionState.Pagado)));
                worksheet.Cells["M6:N6"].Merge = true;
                worksheet.Cells["M6"].Value = ContributionState.Pagado.ToString() + " Automático";
                worksheet.Cells["L7"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells["L7"].Style.Fill.BackgroundColor.SetColor(GetColor(0, ((int)ContributionState.Pagado)));
                worksheet.Cells["M7:N7"].Merge = true;
                worksheet.Cells["M7"].Value = ContributionState.Pagado.ToString() + " Manual";
                worksheet.Cells["L8"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells["L8"].Style.Fill.BackgroundColor.SetColor(GetColor(0, ((int)ContributionState.SinLiquidez)));
                worksheet.Cells["M8:N8"].Merge = true;
                worksheet.Cells["M8"].Value = ContributionState.SinLiquidez.ToString();
                #endregion

                //Create Headers and format them 
                var properties = new[]
                    {
                        "AÑO",
                        "ENERO","FEBRERO","MARZO","ABRIL","MAYO",
                        "JUNIO","JULIO","AGOSTO","SEPTIEMBRE","OCTUBRE",
                        "NOVIEMBRE","DICIEMBRE", "TOTAL"
                    };
                for (int i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[10, i + 1].Value = properties[i];
                    worksheet.Cells[10, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[10, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[10, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[10, i + 1].Style.Font.Bold = true;
                }

                int row = 11;
                decimal ene, feb, mar, abr, may, jun, jul, ago, sep, oct, nov, dic, total;
                int t;
                foreach (var p in reportContributionPayment)
                {
                    int col = 1;
                    if (worksheet.Cells[row - 1, col].Value != null && int.TryParse(worksheet.Cells[row - 1, col].Value.ToString(), out t)
                        && Convert.ToInt32(worksheet.Cells[row - 1, col].Value.ToString()) == p.Year)
                        row--;

                    worksheet.Cells[row, col].Value = p.Year;
                    col++;

                    ene = Convert.ToDecimal(worksheet.Cells[row, col].Value) + (p.Ene);
                    if (worksheet.Cells[row, col].Value == null)
                    {
                        worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                    }
                    else
                    {
                        if (Convert.ToDecimal(worksheet.Cells[row, col].Value) == 0)
                        {
                            worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                        }
                    }
                    worksheet.Cells[row, col].Value = ene;
                    col++;

                    feb = Convert.ToDecimal(worksheet.Cells[row, col].Value) + (p.Feb);
                    if (worksheet.Cells[row, col].Value == null)
                    {
                        worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                    }
                    else
                    {
                        if (Convert.ToDecimal(worksheet.Cells[row, col].Value) == 0)
                        {
                            worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                        }
                    }
                    worksheet.Cells[row, col].Value = feb;
                    col++;

                    mar = Convert.ToDecimal(worksheet.Cells[row, col].Value) + (p.Mar);
                    if (worksheet.Cells[row, col].Value == null)
                    {
                        worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                    }
                    else
                    {
                        if (Convert.ToDecimal(worksheet.Cells[row, col].Value) == 0)
                        {
                            worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                        }
                    }
                    worksheet.Cells[row, col].Value = mar;
                    col++;

                    abr = Convert.ToDecimal(worksheet.Cells[row, col].Value) + (p.Abr);
                    if (worksheet.Cells[row, col].Value == null)
                    {
                        worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                    }
                    else
                    {
                        if (Convert.ToDecimal(worksheet.Cells[row, col].Value) == 0)
                        {
                            worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                        }
                    }
                    worksheet.Cells[row, col].Value = abr;
                    col++;

                    may = Convert.ToDecimal(worksheet.Cells[row, col].Value) + (p.May);
                    if (worksheet.Cells[row, col].Value == null)
                    {
                        worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                    }
                    else
                    {
                        if (Convert.ToDecimal(worksheet.Cells[row, col].Value) == 0)
                        {
                            worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                        }
                    }
                    worksheet.Cells[row, col].Value = may;
                    col++;

                    jun = Convert.ToDecimal(worksheet.Cells[row, col].Value) + (p.Jun);
                    if (worksheet.Cells[row, col].Value == null)
                    {
                        worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                    }
                    else
                    {
                        if (Convert.ToDecimal(worksheet.Cells[row, col].Value) == 0)
                        {
                            worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                        }
                    }
                    worksheet.Cells[row, col].Value = jun;
                    col++;

                    jul = Convert.ToDecimal(worksheet.Cells[row, col].Value) + (p.Jul);
                    if (worksheet.Cells[row, col].Value == null)
                    {
                        worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                    }
                    else
                    {
                        if (Convert.ToDecimal(worksheet.Cells[row, col].Value) == 0)
                        {
                            worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                        }
                    }
                    worksheet.Cells[row, col].Value = jul;
                    col++;

                    ago = Convert.ToDecimal(worksheet.Cells[row, col].Value) + (p.Ago);
                    if (worksheet.Cells[row, col].Value == null)
                    {
                        worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                    }
                    else
                    {
                        if (Convert.ToDecimal(worksheet.Cells[row, col].Value) == 0)
                        {
                            worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                        }
                    }
                    worksheet.Cells[row, col].Value = ago;
                    col++;

                    sep = Convert.ToDecimal(worksheet.Cells[row, col].Value) + (p.Sep);
                    if (worksheet.Cells[row, col].Value == null)
                    {
                        worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                    }
                    else
                    {
                        if (Convert.ToDecimal(worksheet.Cells[row, col].Value) == 0)
                        {
                            worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                        }
                    }
                    worksheet.Cells[row, col].Value = sep;
                    col++;

                    oct = Convert.ToDecimal(worksheet.Cells[row, col].Value) + (p.Oct);
                    if (worksheet.Cells[row, col].Value == null)
                    {
                        worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                    }
                    else
                    {
                        if (Convert.ToDecimal(worksheet.Cells[row, col].Value) == 0)
                        {
                            worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                        }
                    }
                    worksheet.Cells[row, col].Value = oct;
                    col++;

                    nov = Convert.ToDecimal(worksheet.Cells[row, col].Value) + (p.Nov);
                    if (worksheet.Cells[row, col].Value == null)
                    {
                        worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                    }
                    else
                    {
                        if (Convert.ToDecimal(worksheet.Cells[row, col].Value) == 0)
                        {
                            worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                        }
                    }
                    worksheet.Cells[row, col].Value = nov;
                    col++;

                    dic = Convert.ToDecimal(worksheet.Cells[row, col].Value) + (p.Dic);
                    if (worksheet.Cells[row, col].Value == null)
                    {
                        worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                    }
                    else
                    {
                        if (Convert.ToDecimal(worksheet.Cells[row, col].Value) == 0)
                        {
                            worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(GetColor(p.IsAutomatic, p.StateId));
                        }
                    }
                    worksheet.Cells[row, col].Value = dic;
                    col++;

                    total = ene + feb + mar + abr + may + jun + jul + ago + sep + oct + nov + dic;
                    worksheet.Cells[row, col].Value = total;
                    worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(Color.White);
                    col++;

                    row++;
                }

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }

                xlPackage.Save();
            }
        }

        public virtual string ExportReportContributionPaymentToPdf(Customer customer, Contribution contribution, IList<ReportContributionPayment> reportContributionPayment)
        {
            const String IMAGE =
                "";

            var sb = new StringBuilder();

            var img = "</br>";

            img += "<img style='display:block; width:250px;height:80px;' id='base64image'" +
                   "src='data:image/jpeg;base64, " + IMAGE + "' />" +
                   "</br>" +
                   "<table style='font-family:arial; font-size:10px;'>" +
                   "<tr>" +
                   "<td align='center'  rowspan='4' style='width:30%;'>AUXILIO COOPERATIVO MILITAR DE RETIROS</td>" +
                   "</tr>" +
                   "<tr>" +
                   "<td align='center'  style='width:30%;'>  Jirón Cervantes N°197 </td>" +
                   "</tr>" +
                   "<tr>" +
                   "<td align='center'  rowspan='4' style='width:30%;'>Cercado de Lima</td>" +
                   "</tr>" +
                   "</table>" +
                   "</br>";

            sb.Append(img);


            //Generando las cabeceras
            //tabla de resumen
            sb.Append("<table><tr>" +
                      "<td align='left' style='width:100%;'>");

            sb.Append("<table style='font-family:arial; font-size:10px;'>" +
                      "<tr>" +
                          "<td rowspan='4' style='width:30%;'><b>Aportante:</b></td>" +
                          "<td style='width:40%;'> " + customer.GetFullName() + " </td>" +
                          "<td rowspan='4' style='width:30%;'><b>Monto:</b></td>" +
                          "<td style='width:40%;'> " + contribution.AmountPayed.ToString("c", new CultureInfo("es-PE")) + " </td>" +
                      "</tr>" +
                      "</table>" +

                      "<table style='font-family:arial; font-size:10px;'>" +
                      "<tr>" +
                      "<td rowspan='4' style='width:30%;'><b>Dni:</b></td>" +
                      "<td style='width:40%;'> " + customer.GetGenericAttribute(SystemCustomerAttributeNames.Dni) +
                      " </td>" +
                      "<td rowspan='4' style='width:30%;'><b>Aporte desde:</b></td>" +
                      "<td style='width:40%;'> " + _dateTimeHelper.ConvertToUserTime(contribution.CreatedOnUtc, TimeZoneInfo.Utc).ToShortDateString() + " </td>" +
                      "</tr>" +
                      "</table>" +

                      "<table style='font-family:arial; font-size:10px;'>" +
                      "<tr>" +
                      "<td rowspan='4' style='width:30%;'><b>N° Adm:</b></td>" +
                      "<td style='width:40%;'> " + customer.GetGenericAttribute(SystemCustomerAttributeNames.AdmCode) +
                      " </td>" +
                      "<td rowspan='4' style='width:30%;'><b>Último Pago:</b></td>" +
                      "<td style='width:40%;'> " + (contribution.UpdatedOnUtc.HasValue ? _dateTimeHelper.ConvertToUserTime(contribution.UpdatedOnUtc.Value, TimeZoneInfo.Utc).ToShortDateString() : "") + " </td>" +
                      "</tr>" +
                      "</table>" +

                      "</td>" +
                      "</tr>");
            sb.Append("</table>");


            var properties = new[]
                    {
                        "AÑO",
                        "ENERO","FEBRERO","MARZO","ABRIL","MAYO",
                        "JUNIO","JULIO","AGOSTO","SEPTIEMBRE","OCTUBRE",
                        "NOVIEMBRE","DICIEMBRE", "TOTAL"
                    };

            var body = "<table style='border:1px solid black; font-size:10px;'>" +
                        "<tr>";
            for (int i = 0; i < properties.Length; i++)
            {
                body += "<td style='border-bottom: 1px solid #ddd;'>" + properties[i] + "</td>";
            }
            body += "</tr>";
            var lastYear = 0;
            decimal ene = 0, feb = 0, mar = 0, abr = 0, may = 0, jun = 0, jul = 0, ago = 0, sep = 0, oct = 0, nov = 0, dic = 0;

            foreach (var p in reportContributionPayment)
            {

                acumula(p, ref ene, ref feb, ref mar,
                    ref abr, ref may, ref jun,
                    ref jul, ref ago, ref sep,
                    ref oct, ref nov, ref dic);

                var suma = ene + feb + mar + abr + may + jun + jul + ago + sep + oct + nov + dic;

                if (suma > 0)
                {
                    body += "<tr>" +
                        "<td>" + p.Year + "</td>" +
                        "<td>" + (ene == 0 ? "-" : ene.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "<td>" + (feb == 0 ? "-" : feb.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "<td>" + (mar == 0 ? "-" : mar.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "<td>" + (abr == 0 ? "-" : abr.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "<td>" + (may == 0 ? "-" : may.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "<td>" + (jun == 0 ? "-" : jun.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "<td>" + (jul == 0 ? "-" : jul.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "<td>" + (ago == 0 ? "-" : ago.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "<td>" + (sep == 0 ? "-" : sep.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "<td>" + (oct == 0 ? "-" : oct.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "<td>" + (nov == 0 ? "-" : nov.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "<td>" + (dic == 0 ? "-" : dic.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "<td>" + (suma == 0 ? "-" : suma.ToString("c", new CultureInfo("es-PE"))) + "</td>" +
                        "</tr>";
                    ene = 0; feb = 0; mar = 0; abr = 0; may = 0;
                    jun = 0; jul = 0; ago = 0; sep = 0; oct = 0; nov = 0; dic = 0;
                }

            }

            body += "</table>";

            sb.Append(body);
            return sb.ToString();
        }

        private void acumula(ReportContributionPayment p,
             ref decimal ene, ref decimal feb, ref decimal mar, ref decimal abr,
             ref decimal may, ref decimal jun, ref decimal jul, ref decimal ago,
             ref decimal sep, ref decimal oct, ref decimal nov, ref decimal dic)
        {
            ene += p.Ene; feb += p.Feb; mar += p.Mar; abr += p.Abr;
            may += p.May; jun += p.Jun; jul += p.Jul; ago += p.Ago;
            sep += p.Sep; oct += p.Oct; nov += p.Nov; dic += p.Dic;
        }


        public virtual void ExportReportLoanPaymentToXlsx(Stream stream, Customer customer, Loan loan, IList<ReportLoanPayment> reportLoanPayment)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add("Apoyo Social Económico");
                try
                {
                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e) { }

                #region Summary

                worksheet.Cells["A6:A9"].Style.Font.Bold = true;
                worksheet.Cells["E6:E9"].Style.Font.Bold = true;
                worksheet.Cells["G6:G9"].Style.Font.Bold = true;

                worksheet.Cells["A6"].Value = "Aportante:";
                worksheet.Cells["B6:C6"].Merge = true;
                worksheet.Cells["B6"].Value = customer.GetFullName();
                worksheet.Cells["A7"].Value = "Dni:";
                worksheet.Cells["B7:C7"].Merge = true;
                worksheet.Cells["B7"].Value = customer.GetGenericAttribute(SystemCustomerAttributeNames.Dni);
                worksheet.Cells["A8"].Value = "N° Adm:";
                worksheet.Cells["B8:C8"].Merge = true;
                worksheet.Cells["B8"].Value = customer.GetGenericAttribute(SystemCustomerAttributeNames.AdmCode);
                worksheet.Cells["A9"].Value = "Solicitado:";
                worksheet.Cells["B9:C9"].Merge = true;
                worksheet.Cells["B9"].Value = _dateTimeHelper.ConvertToUserTime(loan.CreatedOnUtc, DateTimeKind.Utc).ToString(CultureInfo.InvariantCulture);

                worksheet.Cells["E6"].Value = "Plazo:";
                worksheet.Cells["F6"].Value = string.Format("{0} Meses", loan.Period);
                worksheet.Cells["E7"].Value = "Cuota Mensual:";
                worksheet.Cells["F7"].Value = loan.MonthlyQuota.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells["E8"].Value = "Importe:";
                worksheet.Cells["F8"].Value = loan.LoanAmount.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells["E9"].Value = "Total a Girar:";
                worksheet.Cells["F9"].Value = loan.TotalToPay.ToString("c", new CultureInfo("es-PE"));

                worksheet.Cells["G6"].Value = "T.E.A:";
                worksheet.Cells["H6"].Value = (loan.Tea / 100).ToString("p", new CultureInfo("es-PE"));
                worksheet.Cells["G7"].Value = "Seg Desgravamen:";
                worksheet.Cells["H7"].Value = (loan.Safe / 100).ToString("p", new CultureInfo("es-PE"));
                worksheet.Cells["G8"].Value = "Total Intereses:";
                worksheet.Cells["H8"].Value = loan.TotalFeed.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells["G9"].Value = "Total Desgravamen:";
                worksheet.Cells["H9"].Value = loan.TotalSafe.ToString("c", new CultureInfo("es-PE"));

                #endregion

                //Create Headers and format them 
                var properties = new[]
                    {
                        "CUOTA","AÑO","MES","CAPITAL","INTERES","CUOTA MENSUAL","MONTO PAGADO","ESTADO"
                    };
                for (var i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[11, i + 1].Value = properties[i];
                    worksheet.Cells[11, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[11, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[11, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[11, i + 1].Style.Font.Bold = true;
                }

                var row = 12;
                var totalMonthlyCapital = 0M;
                var totalMonthlyFee = 0M;
                var totalMonthlyQuota = 0M;
                var totalMonthlyPayed = 0M;

                foreach (var p in reportLoanPayment)
                {
                    var col = 1;
                    worksheet.Cells[row, col].Value = p.Quota;
                    worksheet.Cells[row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                    col++;
                    worksheet.Cells[row, col].Value = p.Year;
                    worksheet.Cells[row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                    col++;
                    worksheet.Cells[row, col].Value = p.MonthName;
                    col++;
                    worksheet.Cells[row, col].Value = p.MonthlyCapital.ToString("c", new CultureInfo("es-PE"));
                    worksheet.Cells[row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                    col++;
                    worksheet.Cells[row, col].Value = p.MonthlyFee.ToString("c", new CultureInfo("es-PE"));
                    worksheet.Cells[row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                    col++;
                    worksheet.Cells[row, col].Value = p.MonthlyQuota.ToString("c", new CultureInfo("es-PE"));
                    worksheet.Cells[row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                    col++;
                    worksheet.Cells[row, col].Value = p.MonthlyPayed.ToString("c", new CultureInfo("es-PE"));
                    worksheet.Cells[row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                    col++;
                    worksheet.Cells[row, col].Value = GetStateLoanName(p.StateId);

                    totalMonthlyCapital += p.MonthlyCapital;
                    totalMonthlyFee += p.MonthlyFee;
                    totalMonthlyQuota += p.MonthlyQuota;
                    totalMonthlyPayed += p.MonthlyPayed;
                    row++;
                }

                worksheet.Cells[row, 1].Value = "Total";
                worksheet.Cells[row, 1].Style.Font.Bold = true;
                worksheet.Cells[row, 4].Value = totalMonthlyCapital.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells[row, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells[row, 4].Style.Font.Bold = true;
                worksheet.Cells[row, 5].Value = totalMonthlyFee.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells[row, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells[row, 5].Style.Font.Bold = true;
                worksheet.Cells[row, 6].Value = totalMonthlyQuota.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells[row, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells[row, 6].Style.Font.Bold = true;
                worksheet.Cells[row, 7].Value = totalMonthlyPayed.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells[row, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells[row, 7].Style.Font.Bold = true;

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }
        }

        public virtual void ExportReportLoanPaymentKardexToXlsx(Stream stream, Customer customer, Loan loan, IList<ReportLoanPaymentKardex> reportLoanPaymentKardex)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add("Apoyo Social Económico Kardex");

                try
                {
                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e) { }

                #region Summary

                worksheet.Cells["A6:A9"].Style.Font.Bold = true;
                worksheet.Cells["D6:D9"].Style.Font.Bold = true;
                worksheet.Cells["G6:G9"].Style.Font.Bold = true;

                worksheet.Cells["A6"].Value = "Nombre:";
                worksheet.Cells["B6"].Value = customer.GetFullName();
                worksheet.Cells["A7"].Value = "Dni:";
                worksheet.Cells["B7"].Value = customer.GetGenericAttribute(SystemCustomerAttributeNames.Dni);
                worksheet.Cells["A8"].Value = "N° Adm:";
                worksheet.Cells["B8"].Value = customer.GetGenericAttribute(SystemCustomerAttributeNames.AdmCode);
                worksheet.Cells["A9"].Value = "Fecha de Solicitud:";
                worksheet.Cells["B9"].Value = _dateTimeHelper.ConvertToUserTime(loan.CreatedOnUtc, DateTimeKind.Utc).ToString(CultureInfo.InvariantCulture);

                worksheet.Cells["D6"].Value = "Plazo:";
                worksheet.Cells["E6"].Value = string.Format("{0} Meses", loan.Period);
                worksheet.Cells["D7"].Value = "Cuota Mensual:";
                worksheet.Cells["E7"].Value = loan.MonthlyQuota.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells["D8"].Value = "Importe:";
                worksheet.Cells["E8"].Value = loan.LoanAmount.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells["D9"].Value = "Total a Girar:";
                worksheet.Cells["E9"].Value = loan.TotalToPay.ToString("c", new CultureInfo("es-PE"));

                worksheet.Cells["G6"].Value = "T.E.A:";
                worksheet.Cells["H6"].Value = (loan.Tea / 100).ToString("p", new CultureInfo("es-PE"));
                worksheet.Cells["G7"].Value = "Seg Desgravamen:";
                worksheet.Cells["H7"].Value = (loan.Safe / 100).ToString("p", new CultureInfo("es-PE"));
                worksheet.Cells["G8"].Value = "Total Intereses:";
                worksheet.Cells["H8"].Value = loan.TotalFeed.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells["G9"].Value = "Total Desgravamen:";
                worksheet.Cells["H9"].Value = loan.TotalSafe.ToString("c", new CultureInfo("es-PE"));

                #endregion

                //Create Headers and format them 
                var properties = new[]
                    {
                        "ESTADO","TIPO","AÑO","MES","MONTO PAGADO",
                    };
                for (var i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[11, i + 1].Value = properties[i];
                    worksheet.Cells[11, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[11, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[11, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[11, i + 1].Style.Font.Bold = true;
                }

                var row = 12;

                foreach (var p in reportLoanPaymentKardex)
                {
                    var col = 1;
                    worksheet.Cells[row, col].Value = GetStateLoanName(p.StateId);
                    col++;
                    worksheet.Cells[row, col].Value = p.IsAutomatic == 1 ? "Automático" : "Manual";
                    col++;
                    worksheet.Cells[row, col].Value = p.Year;
                    col++;
                    worksheet.Cells[row, col].Value = p.MonthName;
                    col++;
                    worksheet.Cells[row, col].Value = p.MonthlyPayed.ToString("c", new CultureInfo("es-PE"));

                    row++;
                }

                worksheet.Cells[row, 1].Value = "Total Amortizado";
                worksheet.Cells[row, 1].Style.Font.Bold = true;
                worksheet.Cells[row, 5].Value = loan.TotalPayed.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells[row, 5].Style.Font.Bold = true;

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }
        }

        public virtual void ExportReportContributionBenefitToXlsx(Stream stream, Customer customer, ContributionBenefit contributionBenefit,
            IList<ReportContributionBenefit> reportContributionBenefit)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            var report = reportContributionBenefit.FirstOrDefault();

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add(report.BenefitName);
                try
                {
                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e) { }

                #region 1. DATOS GENERALES :

                worksheet.Cells["C5"].Value = report.BenefitType.ToUpper();
                worksheet.Cells["C5"].Style.Font.Bold = true;
                worksheet.Cells["C6"].Value = report.BenefitName.ToUpper();
                worksheet.Cells["C6"].Style.Font.Bold = true;
                worksheet.Cells["C7"].Value = "Nº DE LIQUIDACION: " + report.NumberOfLiquidation;
                worksheet.Cells["C7"].Style.Font.Bold = true;
                worksheet.Cells["A7:D7"].Style.Border.Bottom.Style = ExcelBorderStyle.Thick;

                worksheet.Cells["A9"].Value = "1. DATOS GENERALES :";
                worksheet.Cells["A9"].Style.Font.Bold = true;
                worksheet.Cells["A9"].Style.Font.UnderLine = true;

                worksheet.Cells["B10"].Value = "1.1";
                worksheet.Cells["B10"].Style.Font.Bold = true;
                worksheet.Cells["C10"].Value = "N° Adm:";
                worksheet.Cells["C10"].Style.Font.Bold = true;
                worksheet.Cells["D10"].Value = customer.GetGenericAttribute(SystemCustomerAttributeNames.AdmCode);

                worksheet.Cells["B11"].Value = "1.2";
                worksheet.Cells["B11"].Style.Font.Bold = true;
                worksheet.Cells["C11"].Value = "Dni:";
                worksheet.Cells["C11"].Style.Font.Bold = true;
                worksheet.Cells["D11"].Value = customer.GetGenericAttribute(SystemCustomerAttributeNames.Dni);

                worksheet.Cells["B12"].Value = "1.3";
                worksheet.Cells["B12"].Style.Font.Bold = true;
                worksheet.Cells["C12"].Value = "Apellidos y Nombres:";
                worksheet.Cells["C12"].Style.Font.Bold = true;
                worksheet.Cells["D12"].Value = customer.GetFullName();


                worksheet.Cells["B13"].Value = "1.4";
                worksheet.Cells["B13"].Style.Font.Bold = true;
                worksheet.Cells["C13"].Value = "Fecha Ingreso:";
                worksheet.Cells["C13"].Style.Font.Bold = true;
                worksheet.Cells["D13"].Value = _dateTimeHelper.ConvertToUserTime(customer.CreatedOnUtc, DateTimeKind.Utc).ToString(CultureInfo.InvariantCulture);

                worksheet.Cells["B14"].Value = "1.5";
                worksheet.Cells["B14"].Style.Font.Bold = true;
                worksheet.Cells["C14"].Value = "Años Aportados:";
                worksheet.Cells["C14"].Style.Font.Bold = true;
                worksheet.Cells["D14"].Value = report.YearInActivity + " años";

                var offset = 15;

                if (!string.IsNullOrEmpty(contributionBenefit.CustomValue1))
                {
                    worksheet.Cells["B" + offset].Value = "1." + (offset - 9);
                    worksheet.Cells["B" + offset].Style.Font.Bold = true;
                    worksheet.Cells["C" + offset].Value = contributionBenefit.CustomField1;
                    worksheet.Cells["C" + offset].Style.Font.Bold = true;
                    worksheet.Cells["D" + offset].Value = contributionBenefit.CustomValue1;
                    offset++;
                }

                if (!string.IsNullOrEmpty(contributionBenefit.CustomValue2))
                {
                    worksheet.Cells["B" + offset].Value = "1." + (offset - 9);
                    worksheet.Cells["B" + offset].Style.Font.Bold = true;
                    worksheet.Cells["C" + offset].Value = contributionBenefit.CustomField2;
                    worksheet.Cells["C" + offset].Style.Font.Bold = true;
                    worksheet.Cells["D" + offset].Value = contributionBenefit.CustomValue2;
                    offset++;
                }

                offset++;
                offset++;

                #endregion

                #region 2. CALCULO AUXILIO ECONOMICO :

                worksheet.Cells["A" + offset].Value = "2. CALCULO AUXILIO ECONOMICO";
                worksheet.Cells["A" + offset].Style.Font.Bold = true;
                worksheet.Cells["A" + offset].Style.Font.UnderLine = true;
                offset++;

                worksheet.Cells["B" + offset].Value = "2.1";
                worksheet.Cells["B" + offset].Style.Font.Bold = true;
                worksheet.Cells["C" + offset].Value = "En Base al Beneficio Economico según Calculo Matematico Actuarial:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["D" + offset].Value = report.AmountBaseOfBenefit.ToString("c");
                offset++;

                worksheet.Cells["B" + offset].Value = "2.2";
                worksheet.Cells["B" + offset].Style.Font.Bold = true;
                worksheet.Cells["C" + offset].Value = "Factor Variable Según Años Aportados:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["D" + offset].Value = report.TabValue;
                offset++;

                worksheet.Cells["B" + offset].Value = "2.3";
                worksheet.Cells["B" + offset].Style.Font.Bold = true;
                worksheet.Cells["C" + offset].Value = "Porcentaje a Pagar:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["D" + offset].Value = report.Discount.ToString("P");
                offset++;

                #region 2.4 Sumatoria Aportes y Apoyo del Fondo de Reserva

                worksheet.Cells["B" + offset].Value = "2.4";
                worksheet.Cells["B" + offset].Style.Font.Bold = true;
                worksheet.Cells["C" + offset].Value = "Sumatoria Aportes y Apoyo del Fondo de Reserva:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                offset++;

                worksheet.Cells["C" + offset].Value = "2.4.1 Aportes del Asociado en Actividad:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["D" + offset].Value = report.TotalContributionCopere.ToString("c");
                offset++;

                worksheet.Cells["C" + offset].Value = "2.4.2. Aportes del Asociado en Retiro:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["D" + offset].Value = report.TotalContributionCaja.ToString("c");
                offset++;

                worksheet.Cells["C" + offset].Value = "2.4.3. Aportes Pagos Personales:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["D" + offset].Value = report.TotalContributionPersonalPayment.ToString("c");
                offset++;

                worksheet.Cells["C" + offset].Value = "2.4.4. Apoyo Fondo de Reserva:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["D" + offset].Value = report.ReserveFund.ToString("c");
                offset++;

                worksheet.Cells["C" + offset].Value = "2.4.5. Aportacion Total:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["C" + offset].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells["C" + offset].Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#77dd77"));
                worksheet.Cells["D" + offset].Value = report.SubTotalToPay.ToString("c");
                worksheet.Cells["D" + offset].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells["D" + offset].Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#77dd77"));
                offset++;

                #endregion

                #region 2.4 Deducciones

                worksheet.Cells["B" + offset].Value = "2.5";
                worksheet.Cells["B" + offset].Style.Font.Bold = true;
                worksheet.Cells["C" + offset].Value = "Deducciones";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                offset++;

                worksheet.Cells["C" + offset].Value = "2.5.1. Prestamos Pendites:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["D" + offset].Value = report.TotalLoan;
                offset++;

                worksheet.Cells["C" + offset].Value = "2.5.2. Aportes Pendientes:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["D" + offset].Value = report.TotalLoanToPay.ToString("c");
                offset++;

                worksheet.Cells["C" + offset].Value = "2.5.3. Deducción Total:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["C" + offset].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells["C" + offset].Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#77dd77"));
                worksheet.Cells["D" + offset].Value = report.TotalLoanToPay.ToString("c");
                worksheet.Cells["D" + offset].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells["D" + offset].Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#77dd77"));
                offset++;

                #endregion

                #region 2.6 Beneficio Económico a Liquidar:

                worksheet.Cells["B" + offset].Value = "2.6";
                worksheet.Cells["B" + offset].Style.Font.Bold = true;
                worksheet.Cells["C" + offset].Value = "Beneficio Económico a Liquidar:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["D" + offset].Value = (report.TotalToPay).ToString("C", new CultureInfo("es-PE"));
                offset++;

                #endregion

                #region 2.7 Pago Beneficiarios según Sucesion Intestada Nº 1863

                worksheet.Cells["B" + offset].Value = "2.7";
                worksheet.Cells["B" + offset].Style.Font.Bold = true;
                worksheet.Cells["C" + offset].Value = "Pago Beneficiarios según Sucesion Intestada Nº 1863";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                offset++;

                if (report.Checks != null)
                {
                    var checks = report.Checks.Split('|');
                    var index = 1;
                    foreach (var check in checks)
                    {
                        worksheet.Cells["C" + offset].Value = "2.7." + index + check.Split('-')[0];
                        worksheet.Cells["C" + offset].Style.Font.Bold = true;
                        worksheet.Cells["D" + offset].Value = Convert.ToDecimal(check.Split('-')[1]).ToString("c");
                        offset++;
                        index++;
                    }
                }
                #endregion

                worksheet.Cells["B" + offset].Value = "2.8";
                worksheet.Cells["B" + offset].Style.Font.Bold = true;
                worksheet.Cells["C" + offset].Value = "Auxilio Economico total a pagar:";
                worksheet.Cells["C" + offset].Style.Font.Bold = true;
                worksheet.Cells["C" + offset].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells["C" + offset].Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#77dd77"));
                worksheet.Cells["D" + offset].Value = report.TotalToPay.ToString("c", new CultureInfo("es-PE"));
                worksheet.Cells["D" + offset].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells["D" + offset].Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#77dd77"));
                offset++;
                offset++;
                offset++;
                offset++;
                offset++;

                #endregion

                #region Firmas

                worksheet.Cells["A" + offset].Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;
                worksheet.Cells["A" + (offset + 1)].Value = _signatureSettings.BenefitRightName;
                worksheet.Cells["A" + (offset + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["A" + (offset + 2)].Value = _signatureSettings.BenefitRightPosition;
                worksheet.Cells["A" + (offset + 2)].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["A" + (offset + 3)].Value = _signatureSettings.DefaultName;
                worksheet.Cells["A" + (offset + 3)].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;

                worksheet.Cells["C" + offset].Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;
                worksheet.Cells["C" + (offset + 1)].Value = _signatureSettings.BenefitCenterName;
                worksheet.Cells["C" + (offset + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["C" + (offset + 2)].Value = _signatureSettings.BenefitCenterName;
                worksheet.Cells["C" + (offset + 2)].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["C" + (offset + 3)].Value = _signatureSettings.DefaultName;
                worksheet.Cells["C" + (offset + 3)].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;

                worksheet.Cells["E" + (offset)].Style.Border.Bottom.Style = ExcelBorderStyle.DashDot;
                worksheet.Cells["E" + (offset + 1)].Value = _signatureSettings.BenefitLeftName;
                worksheet.Cells["E" + (offset + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["E" + (offset + 2)].Value = _signatureSettings.BenefitLeftPosition;
                worksheet.Cells["E" + (offset + 3)].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["E" + (offset + 3)].Value = _signatureSettings.DefaultName;
                worksheet.Cells["E" + (offset + 3)].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                #endregion

                var imagePathSignature = new Bitmap(new MemoryStream(Convert.FromBase64String(ESCUDO)));
                var imageSignature = new Bitmap(imagePathSignature);
                var excelImageSignature = worksheet.Drawings.AddPicture("Firma", imageSignature);
                excelImageSignature.From.Column = 2;
                excelImageSignature.From.Row = offset + 4;
                excelImageSignature.SetSize(115, 115);
                excelImageSignature.AdjustPositionAndSize();

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }

        }

        public virtual void ExportGlobalReportToXlsx(MemoryStream stream, int year, int month, IList<ReportGlobal> globalReport)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add("Resumen");
                // var imagePath = _webHelper.MapPath(@"C:\inetpub\wwwroot\Acmr\Administration\Content\images\logo.png");
                try
                {

                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e) { }


                #region Summary

                var date = new DateTime(year, month, 1);

                worksheet.Cells["C5:C7"].Style.Font.Bold = true;
                worksheet.Cells["C5:C7"].Style.Font.Size = 20;
                worksheet.Cells["C5:C7"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["C5"].Value = "APORTACIONES / APOYO SOCIAL ECONOMICO";
                worksheet.Cells["C6"].Value = "COPERE / CAJA / OTROS";
                worksheet.Cells["C7"].Value = "MES: " + date.ToString("MMMM", new CultureInfo("es-PE")).ToUpper() + " AÑO: " + year;

                #endregion

                //Create Headers and format them 
                var properties = new[]
                    {
                        "TIPO","N° ADMINISTRATIVO","APELLIDOS Y NOMBRE","FECHA PROGRAMADA","FECHA EJECUTADA","NUMERO","VALOR DE COUTA","PROCESO","ENTIDAD","ESTADO"
                    };
                for (var i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[9, i + 1].Value = properties[i];
                    worksheet.Cells[9, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[9, i + 1].Style.Font.Bold = true;
                }

                var row = 10;
                var total = 0M;
                foreach (var p in globalReport)
                {
                    var col = 1;
                    worksheet.Cells[row, col].Value = p.Source;
                    col++;
                    worksheet.Cells[row, col].Value = p.AdmCode;
                    col++;
                    worksheet.Cells[row, col].Value = p.LastName + " ,  " + p.FirstName;
                    col++;
                    worksheet.Cells[row, col].Value = p.ScheduledDate;
                    col++;
                    worksheet.Cells[row, col].Value = p.ProcessedDate;
                    col++;
                    worksheet.Cells[row, col].Value = p.Number;
                    col++;
                    worksheet.Cells[row, col].Value = p.Payed.ToString("c", new CultureInfo("es-PE"));
                    col++;
                    worksheet.Cells[row, col].Value = p.IsAutomatic == 1 ? "Automático" : "Manual";
                    col++;
                    worksheet.Cells[row, col].Value = p.BankName;
                    col++;
                    worksheet.Cells[row, col].Value = p.Source == "Aportaciones" ? GetStateContributionName(p.StateId) : GetStateLoanName(p.StateId);

                    total += p.Payed;
                    row++;
                }

                worksheet.Cells[row, 6].Value = "Total";
                worksheet.Cells[row, 6].Style.Font.Bold = true;
                worksheet.Cells[row, 7].Value = total.ToString("c", new CultureInfo("es-PE"));

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }
        }

        public virtual void ExportDetailLoanToXlsx(MemoryStream stream, DateTime from, DateTime to, string source, IList<ReportLoanDetail> reportLoan)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add("Apoyo Social Económico");
                // var imagePath = _webHelper.MapPath(@"C:\inetpub\wwwroot\Acmr\Administration\Content\images\logo.png");
                try
                {

                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e) { }


                #region Summary
                worksheet.Cells["E5:K5"].Merge = true;
                worksheet.Cells["E6:K6"].Merge = true;
                worksheet.Cells["E7:K7"].Merge = true;
                worksheet.Cells["E8:K8"].Merge = true;
                worksheet.Cells["E5:K8"].Style.Font.Bold = true;
                worksheet.Cells["E5:K8"].Style.Font.Size = 20;
                worksheet.Cells["E5:K8"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["E5"].Value = "APOYO SOCIAL ECONOMICO";
                worksheet.Cells["E6"].Value = "REPORTE";
                worksheet.Cells["E7"].Value = source.ToUpper();
                worksheet.Cells["E8"].Value = "DESDE :" + from.ToShortDateString() + " - HASTA:" + to.ToShortDateString();

                #endregion

                //Create Headers and format them 
                var properties = new[]
                    {
                        "APELLIDOS Y NOMBRE","N° ADMINISTRATIVO","SITUACION MILITAR","FECHA DE GIRO","ORDEN DE PAGO",
                        "MONTO SOLICITADO","MMONTO ENTREGADO","CUOTAS","MONTO PAGADO","MONTO ADEUDADO",
                        "ADEUDA"
                    };
                for (var i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[9, i + 1].Value = properties[i];
                    worksheet.Cells[9, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[9, i + 1].Style.Font.Bold = true;
                }

                var row = 10;

                foreach (var p in reportLoan)
                {
                    var col = 1;
                    worksheet.Cells[row, col].Value = p.LastName + " ,  " + p.FirstName;
                    col++;
                    worksheet.Cells[row, col].Value = p.AdmCode;
                    col++;
                    worksheet.Cells[row, col].Value = p.MilitarySituation;
                    col++;
                    worksheet.Cells[row, col].Value = p.ApprovalOn;
                    col++;
                    worksheet.Cells[row, col].Value = p.LoanNumber;
                    col++;
                    worksheet.Cells[row, col].Value = p.LoanAmount.ToString("c", new CultureInfo("es-PE"));
                    col++;
                    worksheet.Cells[row, col].Value = p.TotalToPay.ToString("c", new CultureInfo("es-PE"));
                    col++;
                    worksheet.Cells[row, col].Value = p.Period;
                    col++;
                    worksheet.Cells[row, col].Value = p.MonthlyPayed.ToString("c", new CultureInfo("es-PE"));
                    col++;
                    worksheet.Cells[row, col].Value = p.TotalAmount.ToString("c", new CultureInfo("es-PE"));
                    col++;
                    row++;
                }


                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }
        }

        public virtual void ExportSummaryContributionToXlsx(MemoryStream stream, int fromId, int toId, int typeId, IList<ReportSummaryContribution> summaryContribution)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add("Aportacines");
                // var imagePath = _webHelper.MapPath(@"C:\inetpub\wwwroot\Acmr\Administration\Content\images\logo.png");
                try
                {

                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e)
                {
                }

                #region Summary
                worksheet.Cells["A5:O5"].Merge = true;
                worksheet.Cells["A6:O6"].Merge = true;
                worksheet.Cells["A5:O6"].Style.Font.Bold = true;
                worksheet.Cells["A5:O6"].Style.Font.Size = 20;
                worksheet.Cells["A5:O6"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["A5"].Value = "CONSOLIDADO DE APORTACIONES";
                worksheet.Cells["A6"].Value = "ENERO " + fromId + " DICIEMBRE " + toId;

                #endregion

                //Create Headers and format them 
                var properties = new[]
                    {
                        "N° ADMINISTRATIVO","APELLIDO Y NOMBRE","FUENTE",
                        "ENERO","FEBRERO","MARZO","ABRIL","MAYO",
                        "JUNIO","JULIO","AGOSTO","SEPTIEMBRE","OCTUBRE",
                        "NOVIEMBE","DICIEMBRE","TOTAL"
                    };
                for (var i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[9, i + 1].Value = properties[i];
                    worksheet.Cells[9, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[9, i + 1].Style.Font.Bold = true;
                }

                var row = 10;
                var totalEne = 0M;
                var totalFeb = 0M;
                var totalMar = 0M;
                var totalAbr = 0M;
                var totalMay = 0M;
                var totalJun = 0M;
                var totalJul = 0M;
                var totalAgo = 0M;
                var totalSep = 0M;
                var totalOct = 0M;
                var totalNov = 0M;
                var totalDic = 0M;
                var totalLine = 0M;

                foreach (var p in summaryContribution)
                {
                    var col = 1;
                    worksheet.Cells[row, col].Value = p.CustomerAdmCode;
                    col++;
                    worksheet.Cells[row, col].Value = p.CustomerLastName + " ," + p.CustomerName;
                    col++;
                    worksheet.Cells[row, col].Value = p.TypeSource;
                    col++;
                    worksheet.Cells[row, col].Value = p.Ene;
                    totalEne += p.Ene;
                    col++;
                    worksheet.Cells[row, col].Value = p.Feb;
                    totalFeb += p.Feb;
                    col++;
                    worksheet.Cells[row, col].Value = p.Mar;
                    totalMar += p.Mar;
                    col++;
                    worksheet.Cells[row, col].Value = p.Abr;
                    totalAbr += p.Abr;
                    col++;
                    worksheet.Cells[row, col].Value = p.May;
                    totalMay += p.May;
                    col++;
                    worksheet.Cells[row, col].Value = p.Jun;
                    totalJun += p.Jun;
                    col++;
                    worksheet.Cells[row, col].Value = p.Jul;
                    totalJul += p.Jul;
                    col++;
                    worksheet.Cells[row, col].Value = p.Ago;
                    totalAgo += p.Ago;
                    col++;
                    worksheet.Cells[row, col].Value = p.Sep;
                    totalSep += p.Sep;
                    col++;
                    worksheet.Cells[row, col].Value = p.Oct;
                    totalOct += p.Oct;
                    col++;
                    worksheet.Cells[row, col].Value = p.Nov;
                    totalNov += p.Nov;
                    col++;
                    worksheet.Cells[row, col].Value = p.Dic;
                    totalDic += p.Dic;
                    col++;
                    worksheet.Cells[row, col].Value = p.Ene + p.Feb + p.Mar + p.Abr + p.May + p.Jul + p.Jun + p.Ago + p.Sep + p.Oct + p.Nov + p.Dic;
                    totalLine += p.Ene + p.Feb + p.Mar + p.Abr + p.May + p.Jul + p.Jun + p.Ago + p.Sep + p.Oct + p.Nov + p.Dic;
                    col++;
                    row++;
                }

                worksheet.Cells[row, 4].Value = totalEne;
                worksheet.Cells[row, 5].Value = totalFeb;
                worksheet.Cells[row, 6].Value = totalMar;
                worksheet.Cells[row, 7].Value = totalAbr;
                worksheet.Cells[row, 8].Value = totalMay;
                worksheet.Cells[row, 9].Value = totalJun;
                worksheet.Cells[row, 10].Value = totalJul;
                worksheet.Cells[row, 11].Value = totalAgo;
                worksheet.Cells[row, 12].Value = totalSep;
                worksheet.Cells[row, 13].Value = totalOct;
                worksheet.Cells[row, 14].Value = totalNov;
                worksheet.Cells[row, 15].Value = totalDic;
                worksheet.Cells[row, 16].Value = totalLine;


                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }
        }

        public virtual void ExportSummaryContributionToXlsx(MemoryStream stream, DateTime from, DateTime to, int typeId, IList<ReportSummaryContribution> summaryContribution)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add("Aportacines");
                // var imagePath = _webHelper.MapPath(@"C:\inetpub\wwwroot\Acmr\Administration\Content\images\logo.png");
                try
                {

                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e)
                {
                }

                #region Summary
                worksheet.Cells["A5:O5"].Merge = true;
                worksheet.Cells["A6:O6"].Merge = true;
                worksheet.Cells["A5:O6"].Style.Font.Bold = true;
                worksheet.Cells["A5:O6"].Style.Font.Size = 20;
                worksheet.Cells["A5:O6"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["A5"].Value = "CONSOLIDADO DE APORTACIONES";
                worksheet.Cells["A6"].Value = "DESDE " + from.ToShortDateString() + " HASTA " + to.ToShortDateString();

                #endregion

                //Create Headers and format them 
                var properties = new[]
                    {
                        "N° ADMINISTRATIVO","APELLIDO Y NOMBRE","FUENTE",
                        "ENERO","FEBRERO","MARZO","ABRIL","MAYO",
                        "JUNIO","JULIO","AGOSTO","SEPTIEMBRE","OCTUBRE",
                        "NOVIEMBE","DICIEMBRE","TOTAL"
                    };
                for (var i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[9, i + 1].Value = properties[i];
                    worksheet.Cells[9, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[9, i + 1].Style.Font.Bold = true;
                }

                var row = 10;
                var totalEne = 0M;
                var totalFeb = 0M;
                var totalMar = 0M;
                var totalAbr = 0M;
                var totalMay = 0M;
                var totalJun = 0M;
                var totalJul = 0M;
                var totalAgo = 0M;
                var totalSep = 0M;
                var totalOct = 0M;
                var totalNov = 0M;
                var totalDic = 0M;
                var totalLine = 0M;

                foreach (var p in summaryContribution)
                {
                    var col = 1;
                    worksheet.Cells[row, col].Value = p.CustomerAdmCode;
                    col++;
                    worksheet.Cells[row, col].Value = p.CustomerLastName + " ," + p.CustomerName;
                    col++;
                    worksheet.Cells[row, col].Value = p.TypeSource;
                    col++;
                    worksheet.Cells[row, col].Value = p.Ene;
                    totalEne += p.Ene;
                    col++;
                    worksheet.Cells[row, col].Value = p.Feb;
                    totalFeb += p.Feb;
                    col++;
                    worksheet.Cells[row, col].Value = p.Mar;
                    totalMar += p.Mar;
                    col++;
                    worksheet.Cells[row, col].Value = p.Abr;
                    totalAbr += p.Abr;
                    col++;
                    worksheet.Cells[row, col].Value = p.May;
                    totalMay += p.May;
                    col++;
                    worksheet.Cells[row, col].Value = p.Jun;
                    totalJun += p.Jun;
                    col++;
                    worksheet.Cells[row, col].Value = p.Jul;
                    totalJul += p.Jul;
                    col++;
                    worksheet.Cells[row, col].Value = p.Ago;
                    totalAgo += p.Ago;
                    col++;
                    worksheet.Cells[row, col].Value = p.Sep;
                    totalSep += p.Sep;
                    col++;
                    worksheet.Cells[row, col].Value = p.Oct;
                    totalOct += p.Oct;
                    col++;
                    worksheet.Cells[row, col].Value = p.Nov;
                    totalNov += p.Nov;
                    col++;
                    worksheet.Cells[row, col].Value = p.Dic;
                    totalDic += p.Dic;
                    col++;
                    worksheet.Cells[row, col].Value = p.Ene + p.Feb + p.Mar + p.Abr + p.May + p.Jul + p.Jun + p.Ago + p.Sep + p.Oct + p.Nov + p.Dic;
                    totalLine += p.Ene + p.Feb + p.Mar + p.Abr + p.May + p.Jul + p.Jun + p.Ago + p.Sep + p.Oct + p.Nov + p.Dic;
                    col++;
                    row++;
                }

                worksheet.Cells[row, 4].Value = totalEne;
                worksheet.Cells[row, 5].Value = totalFeb;
                worksheet.Cells[row, 6].Value = totalMar;
                worksheet.Cells[row, 7].Value = totalAbr;
                worksheet.Cells[row, 8].Value = totalMay;
                worksheet.Cells[row, 9].Value = totalJun;
                worksheet.Cells[row, 10].Value = totalJul;
                worksheet.Cells[row, 11].Value = totalAgo;
                worksheet.Cells[row, 12].Value = totalSep;
                worksheet.Cells[row, 13].Value = totalOct;
                worksheet.Cells[row, 14].Value = totalNov;
                worksheet.Cells[row, 15].Value = totalDic;
                worksheet.Cells[row, 16].Value = totalLine;


                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }
        }
        public virtual void ExportMilitarSituationToXlsx(MemoryStream stream, string militarySituation, IList<ReportMilitarSituation> militarSituations)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add("Situacion Militar");
                // var imagePath = _webHelper.MapPath(@"C:\inetpub\wwwroot\Acmr\Administration\Content\images\logo.png");
                try
                {

                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e)
                {
                }

                #region Summary
                worksheet.Cells["A5:M5"].Merge = true;
                worksheet.Cells["A6:M6"].Merge = true;
                worksheet.Cells["A5:M6"].Style.Font.Bold = true;
                worksheet.Cells["A5:M6"].Style.Font.Size = 20;
                worksheet.Cells["A5:M6"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["A5"].Value = "SITUACION MILITAR DE LOS APORTANTES";
                worksheet.Cells["A6"].Value = militarySituation.ToUpper();

                #endregion

                var properties = new[]
                    {
                        "N° AAMINISTRATIVO","APELLIDOS Y NOMBRE","SITUACION MILITAR",
                        "APORTACION","AUTORIZACION DESCUENTO","MONTO POR APORTAR","MONTO ABONADO (A LA FECHA)","MONTO APORTACION PENDIENTE",
                        "Estado Apoyo","N° ORDEN DE PRESTAMO","MONTO SOLICITADO", "MONTO DEL APOYO", "MONTO Apoyo Pendiente",
                        "MONTO PAGADO (A LA FECHA)","PERIODO"

                    };
                for (var i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[9, i + 1].Value = properties[i];
                    worksheet.Cells[9, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[9, i + 1].Style.Font.Bold = true;
                }

                var row = 10;

                foreach (var p in militarSituations)
                {
                    var col = 1;
                    worksheet.Cells[row, col].Value = p.AdmCode;
                    col++;
                    worksheet.Cells[row, col].Value = p.LastName + " ," + p.FirstName;
                    col++;
                    worksheet.Cells[row, col].Value = militarySituation;
                    col++;
                    worksheet.Cells[row, col].Value = p.ContributionState ? "Activo" : "Inactivo";
                    col++;
                    worksheet.Cells[row, col].Value = p.ContributionAuthorizeDiscont;
                    col++;
                    worksheet.Cells[row, col].Value = p.ContributionAmountMeta;
                    col++;
                    worksheet.Cells[row, col].Value = p.ContributionAmountPayed;
                    col++;
                    worksheet.Cells[row, col].Value = p.ContributionAmountMeta - p.ContributionAmountPayed;
                    col++;
                    worksheet.Cells[row, col].Value = p.LoanState ? "Activo" : "Inactivo";
                    col++;
                    worksheet.Cells[row, col].Value = p.LoanNumber;
                    col++;
                    worksheet.Cells[row, col].Value = p.LoanAmount;
                    col++;
                    worksheet.Cells[row, col].Value = p.LoanTotalAmount;
                    col++;
                    worksheet.Cells[row, col].Value = p.LoanTotalAmount - p.LoanTotalPayed;
                    col++;
                    worksheet.Cells[row, col].Value = p.LoanTotalPayed;
                    col++;
                    worksheet.Cells[row, col].Value = p.LoanPeriod;
                    col++;
                    row++;

                }

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }
        }

        public virtual void ExportBenefitToXlsx(MemoryStream stream, Benefit getBenefitById, IList<ReportBenefit> benefit)
        {
            throw new NotImplementedException();
        }

        public virtual string ExportScheduleTxt(ScheduleBatch schedule)
        {
            var nameFile = "";
            if (schedule.SystemName.Trim().ToUpper() == ("KS.BATCH.CAJA.OUT"))
                nameFile = string.Format("6008_{0}00.txt", schedule.PeriodYear.ToString("0000") + schedule.PeriodMonth.ToString("00"));
            else
                nameFile = string.Format("8001_{0}00.txt", schedule.PeriodYear.ToString("0000") + schedule.PeriodMonth.ToString("00"));


            var fileReaded = File.ReadAllLines(Path.Combine(Path.Combine(schedule.PathBase, schedule.FolderMoveToDone),
                        nameFile));

            var sb = new StringBuilder();

            foreach (var s in fileReaded)
            {
                sb.AppendLine(s);
            }

            return sb.ToString();

        }

        public virtual void ExportBankPaymentToXlsx(MemoryStream stream, DateTime from, DateTime to, IList<ReportBankPayment> summaryBankPayment)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add("Depositos Bancarios");
                // var imagePath = _webHelper.MapPath(@"C:\inetpub\wwwroot\Acmr\Administration\Content\images\logo.png");
                try
                {

                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e)
                {
                }

                #region Summary

                worksheet.Cells["A5:M5"].Merge = true;
                worksheet.Cells["A6:M6"].Merge = true;
                worksheet.Cells["A5:M6"].Style.Font.Bold = true;
                worksheet.Cells["A5:M6"].Style.Font.Size = 20;
                worksheet.Cells["A5:M6"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["A5"].Value = "DEPOSITOS BANCARIOS ";
                worksheet.Cells["A6"].Value = "Desde: " + from.ToShortDateString() + " - Hasta: " + to.ToShortDateString();

                #endregion


                var properties = new[]
                {
                    "APELLIDOS Y NOMBRE", "N° ADMINISTRATIVO", "DNI", "SITUACION MILITAR","FUENTE","BANCO" ,"N° TRANSACCION", "FECHA", "MONTO"
                };

                for (var i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[9, i + 1].Value = properties[i];
                    worksheet.Cells[9, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[9, i + 1].Style.Font.Bold = true;
                }

                var row = 10;
                var total = 0M;

                foreach (var p in summaryBankPayment)
                {
                    var col = 1;
                    worksheet.Cells[row, col].Value = p.LastName + "," + p.FirstName;
                    col++;
                    worksheet.Cells[row, col].Value = p.AdmCode;
                    col++;
                    worksheet.Cells[row, col].Value = p.Dni;
                    col++;
                    worksheet.Cells[row, col].Value = p.MilitarySituation;
                    col++;
                    worksheet.Cells[row, col].Value = p.Data;
                    col++;
                    worksheet.Cells[row, col].Value = p.BankName;
                    col++;
                    worksheet.Cells[row, col].Value = p.TransactionNumber;
                    col++;
                    worksheet.Cells[row, col].Value = p.ProcessedDateOnUtc;
                    col++;
                    worksheet.Cells[row, col].Value = p.AmountPayed;
                    total += p.AmountPayed;
                    col++;

                    row++;

                }
                worksheet.Cells[row, 8].Value = "Total";
                worksheet.Cells[row, 8].Style.Font.Bold = true;
                worksheet.Cells[row, 9].Value = total.ToString("c", new CultureInfo("es-PE"));

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }
        }

        public virtual void ExportinterfaceToXlsx(MemoryStream stream, int yearId, int monthId,
            IList<ReportInterfaceLoan> interfaceLoan, IList<ReportInterfaceContribution> interfaceContribution)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            #region Loan

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add("Apoyo Social Economico");
                // var imagePath = _webHelper.MapPath(@"C:\inetpub\wwwroot\Acmr\Administration\Content\images\logo.png");
                try
                {

                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e)
                {
                }

                #region Summary

                worksheet.Cells["A5:M5"].Merge = true;
                worksheet.Cells["A6:M6"].Merge = true;
                worksheet.Cells["A5:M6"].Style.Font.Bold = true;
                worksheet.Cells["A5:M6"].Style.Font.Size = 20;
                worksheet.Cells["A5:M6"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["A5"].Value = "APOYO SOCIAL ECONÓMICO";
                worksheet.Cells["A6"].Value = "Año: " + yearId + " - Mes: " + monthId.ToString("00");

                #endregion


                var properties = new[]
                {
                    "APELLIDOS Y NOMBRE", "N° ADMINISTRATIVO", "DNI", "SITUACION MILITAR", "ESTADO ASOCIADO","N° AUTORIZACION","SOLICITADO","COUTA", "FECHA PROGRAMADA", "CAPITAL", "INTERES",
                    "MONTO COUTA", "MONTO PAGADO", "ESTADO"
                };

                for (var i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[9, i + 1].Value = properties[i];
                    worksheet.Cells[9, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[9, i + 1].Style.Font.Bold = true;

                    var row = 10;

                    foreach (var p in interfaceLoan)
                    {
                        var col = 1;
                        worksheet.Cells[row, col].Value = p.LastName + "," + p.FirstName;
                        col++;
                        worksheet.Cells[row, col].Value = p.AdmCode;
                        col++;
                        worksheet.Cells[row, col].Value = p.Dni;
                        col++;
                        worksheet.Cells[row, col].Value = p.MilitarySituation;
                        col++;
                        worksheet.Cells[row, col].Value = p.Active;
                        col++;
                        worksheet.Cells[row, col].Value = p.LoanNumber;
                        col++;
                        worksheet.Cells[row, col].Value = p.LoanAmount;
                        col++;
                        worksheet.Cells[row, col].Value = p.Quota;
                        col++;
                        worksheet.Cells[row, col].Value = p.ScheduledDateOnUtc.ToShortDateString();
                        col++;
                        worksheet.Cells[row, col].Value = p.MonthlyCapital;
                        col++;
                        worksheet.Cells[row, col].Value = p.MonthlyFee;
                        col++;
                        worksheet.Cells[row, col].Value = p.MonthlyQuota;
                        col++;
                        worksheet.Cells[row, col].Value = p.MonthlyPayed;
                        col++;
                        worksheet.Cells[row, col].Value = p.State;
                        col++;
                        row++;
                    }
                }

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }

                #endregion

                #region Contribution

                // get handle to the existing worksheet
                worksheet = xlPackage.Workbook.Worksheets.Add("Aportaciones");
                // var imagePath = _webHelper.MapPath(@"C:\inetpub\wwwroot\Acmr\Administration\Content\images\logo.png");
                try
                {

                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e)
                {
                }

                #region Summary

                worksheet.Cells["A5:M5"].Merge = true;
                worksheet.Cells["A6:M6"].Merge = true;
                worksheet.Cells["A5:M6"].Style.Font.Bold = true;
                worksheet.Cells["A5:M6"].Style.Font.Size = 20;
                worksheet.Cells["A5:M6"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["A5"].Value = "APORTACIONES";
                worksheet.Cells["A6"].Value = worksheet.Cells["A6"].Value = "Año: " + yearId + " - Mes: " + monthId.ToString("00");

                #endregion


                var properties2 = new[]
                {
                    "APELLIDOS Y NOMBRE", "N° ADMINISTRATIVO", "DNI", "SITUACION MILITAR", "ESTADO ASOCIADO", "NUMERO", "FECHA PROGRAMADA","MONTO1", "MONTO22", "MONTO ANTERIOR",
                    "MONTO TOTAL", "MONTO PAFADO", "ESTADO"
                };

                for (var i = 0; i < properties2.Length; i++)
                {
                    worksheet.Cells[9, i + 1].Value = properties2[i];
                    worksheet.Cells[9, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[9, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[9, i + 1].Style.Font.Bold = true;

                    var row = 10;

                    foreach (var p in interfaceContribution)
                    {
                        var col = 1;
                        worksheet.Cells[row, col].Value = p.LastName + "," + p.FirstName;
                        col++;
                        worksheet.Cells[row, col].Value = p.AdmCode;
                        col++;
                        worksheet.Cells[row, col].Value = p.Dni;
                        col++;
                        worksheet.Cells[row, col].Value = p.MilitarySituation;
                        col++;
                        worksheet.Cells[row, col].Value = p.Active;
                        col++;
                        worksheet.Cells[row, col].Value = p.Number;
                        col++;
                        worksheet.Cells[row, col].Value = p.ScheduledDateOnUtc.ToShortDateString();
                        col++;
                        worksheet.Cells[row, col].Value = p.Amount1;
                        col++;
                        worksheet.Cells[row, col].Value = p.Amount2;
                        col++;
                        worksheet.Cells[row, col].Value = p.AmountOld;
                        col++;
                        worksheet.Cells[row, col].Value = p.AmountTotal;
                        col++;
                        worksheet.Cells[row, col].Value = p.AmountPayed;
                        col++;
                        worksheet.Cells[row, col].Value = p.State;
                        col++;
                        row++;
                    }
                }

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }

            #endregion
        }

        public virtual void ExportReportInfoToXlsx(MemoryStream stream, string source, List<Info> info)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add(source.Replace(".", " ").Replace("Ks", "").Replace("Batch", "").Trim());

                var properties = new[]
                    {
                        "AÑO","MES","AsociadoId","APELLIDOS Y NOMBRE","N° ADMINISTRATIVO","DNI","TOTAL APORTACION","TOTAL PAGADO","TOTAL APOYO",
                        "COUTA APORTACION","MONTO 1", "MONTO 2", "MONTO 3","MONTO ANTERIOR","MONTO TOTAL","MONTO APORTADO","ESTADOAPORTACIONID",
                        "ES AUTOMATICO","BANCO","CUENTA","TRANSACCION","REFERENCIA", "DESCRIPCION",
                        "COUTA APOYO","COUTA MENSUAL","INTERES","CAPITAL","MONTO PAGADO","ESTADOAPOYOID","ES AUTOMATICO","BANCO",
                        "CUENTA","TRANSACCION","REFERENCIA", "DESCRIPCION"

                    };
                for (var i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[1, i + 1].Value = properties[i];
                    worksheet.Cells[1, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[1, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[1, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[1, i + 1].Style.Font.Bold = true;
                }

                var row = 2;

                foreach (var p in info)
                {
                    var col = 1;
                    worksheet.Cells[row, col].Value = p.Year;
                    col++;
                    worksheet.Cells[row, col].Value = p.Month;
                    col++;
                    worksheet.Cells[row, col].Value = p.CustomerId;
                    col++;
                    worksheet.Cells[row, col].Value = p.CompleteName;
                    col++;
                    worksheet.Cells[row, col].Value = p.AdminCode;
                    col++;
                    worksheet.Cells[row, col].Value = p.Dni;
                    col++;
                    worksheet.Cells[row, col].Value = p.TotalContribution;
                    col++;
                    worksheet.Cells[row, col].Value = p.TotalPayed;
                    col++;
                    worksheet.Cells[row, col].Value = p.TotalLoan;
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.Number.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.Amount1.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.Amount2.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.Amount3.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.AmountOld.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.AmountTotal.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.AmountPayed.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.StateId.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.IsAutomatic.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.BankName.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.AccountNumber.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.TransactionNumber.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.Reference.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.Description.ToString() : "";
                    col++;

                    foreach (var infoLoan in p.InfoLoans)
                    {
                        worksheet.Cells[row, col].Value = infoLoan.Quota;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.MonthlyQuota;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.MonthlyFee;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.MonthlyCapital;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.MonthlyPayed;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.StateId;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.IsAutomatic;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.BankName;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.AccountNumber;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.TransactionNumber;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.Reference;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.Description;
                        col++;
                        row++;
                        col = col - 12;
                    }
                    row++;
                }

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }
        }

        public void ExportReportInfoMergeToXlsx(MemoryStream stream, string source, List<Info> send, List<Info> recive)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add(source.Replace(".", " ").Replace("Ks", "").Replace("Batch", "").Replace(","," ").Trim());

                var properties = new[]
                    {
                        "AÑO","MES","AsociadoId","APELLIDOS Y NOMBRE","N° ADMINISTRATIVO","DNI","TOTAL APORTACION","TOTAL PAGADO","TOTAL APOYO",
                        "COUTA APORTACION","MONTO 1", "MONTO 2", "MONTO 3","MONTO ANTERIOR","MONTO TOTAL","MONTO APORTADO","ESTADOAPORTACIONID",
                        "ES AUTOMATICO","BANCO","CUENTA","TRANSACCION","REFERENCIA", "DESCRIPCION",
                        "ASEID","ASEDETALLEID",
                        "COUTA APOYO","COUTA MENSUAL","INTERES","CAPITAL","MONTO PAGADO","ESTADOAPOYOID","ES AUTOMATICO","BANCO",
                        "CUENTA","TRANSACCION","REFERENCIA", "DESCRIPCION"

                    };
                for (var i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[1, i + 1].Value = properties[i];
                    worksheet.Cells[1, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[1, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[1, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[1, i + 1].Style.Font.Bold = true;
                }

                var row = 2;

                foreach (var p in send)
                {
                    var col = 1;
                    var totalPayed=recive.Where(X => X.AdminCode == p.AdminCode).Sum(X => X.TotalPayed);
                    var color = totalPayed ==0 ? 
                                               Color.FromArgb(255, 100, 100) : 
                                               (p.TotalContribution + p.TotalLoan) == totalPayed ?
                                                                                                  Color.FromArgb(51, 255, 51) : 
                                                                                                  Color.FromArgb(255, 255, 0);
                    worksheet.Cells[row, col].Value = p.Year;
                    col++;
                    worksheet.Cells[row, col].Value = p.Month.ToString("D2");
                    col++;
                    worksheet.Cells[row, col].Value = p.CustomerId;
                    col++;
                    worksheet.Cells[row, col].Value = p.CompleteName;
                    col++;
                    worksheet.Cells[row, col].Value = p.AdminCode;
                    col++;
                    worksheet.Cells[row, col].Value = p.Dni;
                    col++;
                    worksheet.Cells[row, col].Value = p.TotalContribution;
                    col++;
                    worksheet.Cells[row, col].Value = totalPayed;
                    worksheet.Cells[row, col].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[row, col].Style.Fill.BackgroundColor.SetColor(color);
                    worksheet.Cells[row, col].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[row, col].Style.Font.Bold = true;

                    col++;
                    worksheet.Cells[row, col].Value = p.TotalLoan;
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.Number.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.Amount1.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.Amount2.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.Amount3.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.AmountOld.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.AmountTotal.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.AmountPayed.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.StateId.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.IsAutomatic.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.BankName.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.AccountNumber.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.TransactionNumber.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.Reference.ToString() : "";
                    col++;
                    worksheet.Cells[row, col].Value = p.InfoContribution != null ? p.InfoContribution.Description.ToString() : "";
                    col++;

                    foreach (var infoLoan in p.InfoLoans)
                    {
                        worksheet.Cells[row, col].Value = infoLoan.LoanId;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.LoanPaymentId;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.Quota;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.MonthlyQuota;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.MonthlyFee;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.MonthlyCapital;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.MonthlyPayed;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.StateId;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.IsAutomatic;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.BankName;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.AccountNumber;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.TransactionNumber;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.Reference;
                        col++;
                        worksheet.Cells[row, col].Value = infoLoan.Description;
                        col++;
                        row++;
                        col = col - 12;
                    } 
                }

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }
        }

        public virtual void ExportChecksToXlsx(MemoryStream stream, DateTime from, DateTime to, IList<ReportChecks> checks)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add("Cheques");
                // var imagePath = _webHelper.MapPath(@"C:\inetpub\wwwroot\Acmr\Administration\Content\images\logo.png");
                try
                {

                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e)
                {
                }


                #region Summary

                worksheet.Cells["B5:I5"].Merge = true;
                worksheet.Cells["B6:I6"].Merge = true;
                worksheet.Cells["B5:I6"].Style.Font.Bold = true;
                worksheet.Cells["B5:I6"].Style.Font.Size = 20;
                worksheet.Cells["B5:I6"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["B5"].Value = "APOYO SOCIAL ECONOMICO";
                worksheet.Cells["B6"].Value = "DESDE :" + from.ToShortDateString() + " - HASTA:" +
                                              to.ToShortDateString();

                #endregion

                //Create Headers and format them 
                var properties = new[]
                {
                    "APELLIDOS Y NOMBRE", "N° ADMINISTRATIVO", "DNI", "SITUACION MILITAR", "FUENTE",
                    "MONTO DEL CHEQUE", "N° CUENTA", "BANCO", "N° CHEQUE","ESTADO","FECHA"
                };
                for (var i = 0; i < properties.Length; i++)
                {
                    worksheet.Cells[7, i + 1].Value = properties[i];
                    worksheet.Cells[7, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[7, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[7, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[7, i + 1].Style.Font.Bold = true;
                }

                var row = 8;

                foreach (var p in checks)
                {
                    var col = 1;
                    worksheet.Cells[row, col].Value = p.LastName + " ,  " + p.FirstName;
                    col++;
                    worksheet.Cells[row, col].Value = p.AdmCode;
                    col++;
                    worksheet.Cells[row, col].Value = p.Dni;
                    col++;
                    worksheet.Cells[row, col].Value = p.MilitarySituation;
                    col++;
                    worksheet.Cells[row, col].Value = p.Source;
                    col++;
                    worksheet.Cells[row, col].Value = p.Amount.ToString("c", new CultureInfo("es-PE"));
                    col++;
                    worksheet.Cells[row, col].Value = p.AccountNumber;
                    col++;
                    worksheet.Cells[row, col].Value = p.BankName;
                    col++;
                    worksheet.Cells[row, col].Value = p.CheckNumber;
                    col++;
                    worksheet.Cells[row, col].Value = p.State;
                    col++;
                    worksheet.Cells[row, col].Value = p.Date;
                    col++;
                    row++;
                }

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }
        }

        public virtual void ExportReportCustomerToXlsx(MemoryStream stream, IList<ReportCustomer> customer)
        {
            if (stream == null)
                throw new ArgumentNullException("stream");

            using (var xlPackage = new ExcelPackage(stream))
            {
                // get handle to the existing worksheet
                var worksheet = xlPackage.Workbook.Worksheets.Add("Asociados");
                // var imagePath = _webHelper.MapPath(@"C:\inetpub\wwwroot\Acmr\Administration\Content\images\logo.png");
                try
                {

                    var image = new Bitmap(new MemoryStream(Convert.FromBase64String(IMAGE)));
                    var excelImage = worksheet.Drawings.AddPicture("ACMR", image);
                    excelImage.From.Column = 0;
                    excelImage.From.Row = 0;
                }
                catch (Exception e)
                {
                }

                #region Summary

                worksheet.Cells["B5:I5"].Merge = true;
                worksheet.Cells["B6:I6"].Merge = true;
                worksheet.Cells["B5:I6"].Style.Font.Bold = true;
                worksheet.Cells["B5:I6"].Style.Font.Size = 20;
                worksheet.Cells["B5:I6"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                worksheet.Cells["B5"].Value = "ASOCIADOS";
                worksheet.Cells["B6"].Value = "";

                #endregion

                var customHeader = _customerAttributeService.GetAllCustomerAttributes().Select(x => x.Name).ToList().ToArray();
                var map = new Dictionary<string, int>();

                //Create Headers and format them 
                var properties = new List<string>
                {
                    "ID","GENERO","APELLIDOS Y NOMBRE", "N° ADMINISTRATIVO", "DNI",
                    "SITUACION MILITAR ID","SITUACION MILITAR",
                    "N° CARTA DECLARATORIA","FECHA DE INGRESO","FECHA NACIMIENTO",
                    "PAIS","PROVINCIA","DEPARTAMENTO","DIRECCION1","DIRECCION2","TELEFONO","EMAIL",
                     "ESTADO ASOCIADO","ROLES"
                };
                var t = 1;
                foreach (var s in customHeader)
                {
                    map.Add(s, properties.Count + t);
                    t++;
                }
                //"MONTO","MONTO PAGADO","CICLOS TOTALES","CICLOS PAGADOS","CICLOS PARCIALES","CICLOS RETRASOS","DESCRIPCION" 

                properties.AddRange(customHeader);

                for (var i = 0; i < properties.Count; i++)
                {
                    worksheet.Cells[7, i + 1].Value = properties[i];
                    worksheet.Cells[7, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[7, i + 1].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(128, 235, 142));
                    worksheet.Cells[7, i + 1].Style.Fill.BackgroundColor.Tint = 0.599993896298105M;
                    worksheet.Cells[7, i + 1].Style.Font.Bold = true;
                }

                var row = 8;

                foreach (var p in customer)
                {
                    var col = 1;
                    worksheet.Cells[row, col].Value = p.CustomerId;
                    col++;
                    worksheet.Cells[row, col].Value = p.Gender;
                    col++;
                    worksheet.Cells[row, col].Value = p.FirstName + " " + p.LastName;
                    col++;
                    worksheet.Cells[row, col].Value = p.AdmCode;
                    col++;
                    worksheet.Cells[row, col].Value = p.Dni;
                    col++;
                    worksheet.Cells[row, col].Value = p.MilitarySituationId;
                    col++;
                    worksheet.Cells[row, col].Value = p.MilitarySituationName;
                    col++;
                    worksheet.Cells[row, col].Value = p.DeclaratoryLetter;
                    col++;
                    worksheet.Cells[row, col].Value = p.DateOfAdmission.ToString("dd-MM-yyyy");
                    col++;
                    worksheet.Cells[row, col].Value = p.DateOfBirth.ToString("dd-MM-yyyy");
                    col++;
                    worksheet.Cells[row, col].Value = p.CountryName;
                    col++;
                    worksheet.Cells[row, col].Value = p.StateProvinceName;
                    col++;
                    worksheet.Cells[row, col].Value = p.CityName;
                    col++;
                    worksheet.Cells[row, col].Value = p.StreetAddress;
                    col++;
                    worksheet.Cells[row, col].Value = p.StreetAddress2;
                    col++;
                    worksheet.Cells[row, col].Value = p.Phone;
                    col++;
                    worksheet.Cells[row, col].Value = p.Email;
                    col++;
                    worksheet.Cells[row, col].Value = p.Active;
                    col++;
                    worksheet.Cells[row, col].Value = p.CustomerRoleNames;
                    col++;
                    //worksheet.Cells[row, col].Value = p.Contribution != null ? p.Contribution.AmountMeta.ToString() : "";
                    //col++;
                    //worksheet.Cells[row, col].Value = p.Contribution != null ? p.Contribution.AmountPayed.ToString() : "";
                    //col++;
                    //worksheet.Cells[row, col].Value = p.Contribution != null ? p.Contribution.TotalOfCycles.ToString() : "";
                    //col++;
                    //worksheet.Cells[row, col].Value = p.Contribution != null ? p.Contribution.PayedCycles.ToString() : "";
                    //col++;
                    //worksheet.Cells[row, col].Value = p.Contribution != null ? p.Contribution.PartialCycles.ToString() : "";
                    //col++;
                    //worksheet.Cells[row, col].Value = p.Contribution != null ? p.Contribution.DelayCycles.ToString() : "";
                    //col++;
                    //worksheet.Cells[row, col].Value = p.Contribution != null ? p.Contribution.Description.ToString() : "";
                    //col++;
                    string value = "";
                    foreach (var ca in p.CustomerAttributes)
                    {
                        if (ca.CustomerAttributeValues != null)
                        {
                            value = string.Join(",", ca.CustomerAttributeValues.Where(x => x.IsPreSelected).Select(x => x.Name).ToList());
                            worksheet.Cells[row, map[ca.Name]].Value = value;
                        }
                        //else
                        //    worksheet.Cells[row, map[ca.Name]].Value = value;

                    }
                    row++;
                }

                for (var i = 1; i <= worksheet.Dimension.Columns; i++)
                {
                    worksheet.Column(i).AutoFit();
                }
                xlPackage.Save();
            }
        }

        #endregion

        #region Utilities

        private string GetMilitarySituation(string id)
        {
            try
            {
                var _id = Convert.ToInt32(id);
                switch (_id)
                {
                    case (int)CustomerMilitarySituation.Actividad:
                        return "Actividad - COPERE (8001)";
                    case (int)CustomerMilitarySituation.Retiro:
                        return "Retiro - CPMP (6008)";
                    case (int)CustomerMilitarySituation.Personal:
                        return "Personal";
                    case (int)CustomerMilitarySituation.InfoCorp:
                        return "InfoCorp";
                    case (int)CustomerMilitarySituation.Gozado:
                        return "Goce de Beneficio";
                    case (int)CustomerMilitarySituation.Interno:
                        return "Personal Interno";
                    case (int)CustomerMilitarySituation.Renuncia:
                        return "Renuncia";
                }
            }
            catch (Exception e)
            {
                return "";
            }

            return "";
        }

        private Color GetColor(int isAutomatic, int stateId)
        {
            //ContributionState.Pendiente => Color.Gainsboro
            //ContributionState.EnProceso => Color.LightBlue
            //ContributionState.PagoParcial => Color.PaleGreen
            //ContributionState.Pagado.ToString() + " Automático"  => Color.LightPink
            //ContributionState.EnProceso.ToString()+ " Manual"  => Color.PaleGoldenrod

            //#D5D5D5(1)=Pendiente
            //#FFFFd8(2)=En_Proceso
            //#FFDAB4(3)=Pago_Parcial
            //#BDD7EE(4)=Pagado_Automatico
            //#DAFFB4(5)=Pago_Personal
            //#FFB4B4(6)=Sin_Liquidez

            if ((stateId == (int)ContributionState.Pendiente))
                return ColorTranslator.FromHtml("#D5D5D5");
            if (stateId == (int)ContributionState.SinLiquidez)
                return ColorTranslator.FromHtml("#FFB4B4");
            if ((stateId == (int)ContributionState.EnProceso))
                return ColorTranslator.FromHtml("#FFFFd8");
            if ((stateId == (int)ContributionState.PagoParcial))
                return ColorTranslator.FromHtml("#FFDAB4");
            if ((stateId == (int)ContributionState.Pagado) && isAutomatic == 1)
                return ColorTranslator.FromHtml("#BDD7EE");
            if ((stateId == (int)ContributionState.Pagado) && isAutomatic == 0)
                return ColorTranslator.FromHtml("#DAFFB4");

            return ColorTranslator.FromHtml("#D5D5D5");
        }

        private string GetStateContributionName(int stateId)
        {
            switch (stateId)
            {
                case (int)ContributionState.EnProceso: return "En Proceso";
                case (int)ContributionState.Pendiente: return "Pendiente";
                case (int)ContributionState.PagoParcial: return "Pago Parcial";
                case (int)ContributionState.Pagado: return "Pagado";
                case (int)ContributionState.SinLiquidez: return "Sin Liquidez";
                case (int)ContributionState.Devolucion: return "Devolucion";
                case (int)ContributionState.PagoPersonal: return "Pago Personal";
            }
            return "";
        }
        private string GetStateLoanName(int stateId)
        {
            switch (stateId)
            {
                case (int)LoanState.EnProceso: return "En Proceso";
                case (int)LoanState.Pendiente: return "Pendiente";
                case (int)LoanState.PagoParcial: return "Pago Parcial";
                case (int)LoanState.Pagado: return "Pagado";
                case (int)LoanState.SinLiquidez: return "Sin Liquidez";
                case (int)LoanState.Devolucion: return "Devolucion";
                case (int)LoanState.Anulado: return "Anulado";
                case (int)LoanState.PagoPersonal: return "Pago Personal";
                case (int)LoanState.Cancelado: return "Cancelado";
            }
            return "";
        }

        #endregion
    }
}